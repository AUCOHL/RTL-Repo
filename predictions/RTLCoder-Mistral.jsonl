{"generated": "for(i=0;i<10;i=i+1) begin\r    case(i)\r        0 : rx<=1'b0;\r        1 : rx <= data[0;\r        2 : rx <= data[", "label": "for(i=0;i<10;i=i+1) begin\r"}
{"generated": "rx;endalways @(state_rx)begincase(state_rx)IDLE_RX : parity_load_rx = 0;DATA_RX : parity_load_rx = 1;PARITY_BIT", "label": "always @(state_rx)"}
{"generated": "           .right_player_location_out(right_player_location_out),", "label": "        .left_player_input(left_player_input),"}
{"generated": "                                                                                                                                                                                                                                                                           reg_write_en = 0;", "label": "                            reg_write_en = 0;"}
{"generated": "\t\tend\r", "label": "\t\tfir_coeff[16] = 16'hFFF8;\r"}
{"generated": "B;\r", "label": " {A,B} = 2'b00;\r"}
{"generated": ";  wire      clk_out; ", "label": "  reg       rst; "}
{"generated": "= 0;end", "label": "            count <= 0;"}
{"generated": "DIRTY flag array\r    reg [17:0] tag_array_RAM [BLOCKS-1: 0];             // for all tags in RAM\r    reg valid_array_RAM [BLOCKS-1", "label": "        dirty <= dirty_array[index];\r"}
{"generated": "       go         <= 0;        mode    <= 0;        end        else begin        if (ashi_write_state) begin        // We're handling a write request        // Check if the write address is in the valid range", "label": "    end else case (fsm_state) "}
{"generated": "   else if(decrement & amount <= count)        set2<=0;    else        set2<=1;end    assign LED2 = set2;    assign LED3 = (count == 8'b1111", "label": "    else if(decrement & amount <= count)"}
{"generated": "\t\t3'b011:begin\t\t\t\ts = 1'b1;\t\t\t\tc = 1'b1;\t\t\t  end\t\t3'b100:begin\t", "label": "\t\t3'b011:begin"}
{"generated": "       K: rotor_2_output = {8'h6B,8'h6B};", "label": "    K: rotor_2_output = {8'h6B,8'h6B};"}
{"generated": "REG[17] = 32'd17;REG[18] = 32'd18;REG[19] = 32'd19;REG[20] = 3", "label": "    if(ID_EX_IR[31:25]== 7'd1)begin"}
{"generated": "\t$display(\"-----------------------------------------------------\\n\"); \t$display(\"FINISH!!! Simulation Finish .....\\n\"); \t$display(\"-----------------------------------------------------\\n\"); \t$finish; \tendend", "label": "reg signed [7:0] max_xi;"}
{"generated": "8] <= 8'b0;\t\t\tdata_memory[109] <= 8'b0;\t\t\tdata_memory[110] <= 8'b0;\t\t\tdata_", "label": "\t\t\tdata_memory[123] <= 8'b0;"}
{"generated": "     $monitor(\"a = %h, b = %h, c = %h, d = %h, result = %h, result_err = %d, bit_err = %d\", a, b, c, d", "label": "      bit_err = 0;\r"}
{"generated": "control_unit control(reset,instruction[5:0],instruction[2:0],RegWriteD,MemtoRegD,MemWriteD,BranchD,ALUSrcD,RegDstD,jump", "label": "reg MemwriteE,ALUSrcE;"}
{"generated": "] <= $signed(multiplier[i][30-:16]) + $signed(adder[i-1]\r\t\t\tend\r\t\tend\r\tend\r\r\tassign data_out = adder[`", "label": "\t\t\t\tmultiplier[i] <= $signed(coeff[`FILTER_SIZE/2-1-i]) * $signed(data_in);\r"}
{"generated": "   output reg [7:0] rotor_2_output;", "label": "module plugboard("}
{"generated": "   ap_loop_init = 1'b0;", "label": "#0 ap_loop_init = 1'b1;"}
{"generated": " assign a1 = c$wild_app_arg_0;  assign wild_0 = c$wild_app_arg;  assign wild = c$wild_app_arg;  assign ds = wild_", "label": "  assign c$wild_app_arg_0 = $unsigned({{(64-32) {1'b0}},c$i});"}
{"generated": ";     reg [2:0] REG1;     reg [2:0] REG2;     reg [2:0] REG3;     reg [2:0] REG4;     reg [2:0] REG5", "label": "always@(RESET)"}
{"generated": "               ID_EX_mem_read <= mem_read;            end        end    end    assign addr_out = pc;    assign data_out = read_data1;    assign debug_reg = data_in;   ", "label": "        .MEM_WB_reg_write(MEM_WB_reg_write),"}
{"generated": "  always @ (posedge clk)", "label": "     always @ (posedge clk) "}
{"generated": "5; reg [31:0] mem[7];  reg [31:0] mem[8];  reg [31:0] mem[9];  reg [31:0] mem[1]; ", "label": "  aoi22d1 g3829__9906(.A1 (\\mem[1] [23]), .A2 (n_580), .B1 (\\mem[3]"}
{"generated": ": sll\\n----------------);\r    op = 6'b101000; A = 32'b1111111111111111111111", "label": "    op = 6'b101011; A = -100; B = 1;\r"}
{"generated": "                       b_i = (i - 100) % 10;", "label": "                b_i = (i - 100) % 10;"}
{"generated": "A = 1; B = 0; #5;", "label": "A = 1; B = 1; #5;"}
{"generated": ": \r", "label": "always @(posedge clk)\r"}
{"generated": "module ip_clock(", "label": "    IDELAYCTRL_inst ("}
{"generated": "_), .O(i_D[28]) );\tendmodule", "label": "\tYA2GSC opad_Z0 ( .I(i_Z[0]), .E(n_Logic1_), .E2(n_Logic1_), .E4(n_Logic1_), .E8(n_Logic1_), .SR(n_Logic1_), .O(Z[0]));"}
{"generated": "2'b00;\t\tlocalparam GAME_OVER = 2'b01;\t\tlocalparam GAME_PLAYING = 2'b10;\t\t", "label": "\t\t\t\t\tgame_status <= PLAY;\t\t\t"}
{"generated": "   always @(*) begin\r        case (state)\r            EMPTY_REGISTERS: begin\r                if (valid) begin\r                    next_state = FIRST_PIPE_STAGE_FULL;\r                ", "label": "            case (state)\r"}
{"generated": "   output reg [31:0] regOut_A_EXMEM_out,    output reg [31:0] regOut_B_EXMEM_out,    output reg [31:0] regOut_", "label": "    output reg RegWEn_EXMEM_out,    "}
{"generated": "   assign xored_y[2] = y[2] ^ cin;", "label": "    assign xored_y[2] = y[2] ^ cin;"}
{"generated": "", "label": "                    r_Bit_Index <= r_Bit_Index + 1;"}
{"generated": "a);\r\t\t$display(\"b = %h\",b);\r\t\t$display(\"control = %h\",control);\r\t\t$display(\"result = %h\", result);\r\t\t\r\t\t/* Test 4]\r\t\t", "label": "\t\t$display(\"b = %h\",b);\r"}
{"generated": "    input ce, clk;", "label": "    out <= 16'd0;"}
{"generated": "       $dumpfile(\"add_sub.vcd\");", "label": "    $dumpfile(\"add_sub.vcd\");"}
{"generated": "b4(b4[1:0]), \r", "label": "module asyn_dff(\r"}
{"generated": "; D = 1;\r\t\t\t#50000; D = 0;\r\t\t\t#50000; D = 1;\r\t\t\t#50000; D = 0", "label": "\t\t\tassign clk = !clk;\r"}
{"generated": "                   wr_en_nxt = 0;", "label": "                    state_nxt = IDLE_ST;"}
{"generated": "buses();\t end      end   end   endmodule", "label": "      $period(posedge CLK, 3.000, NOT_CLK_PER);"}
{"generated": "1100000;parameter signed [NN_KERNEL_BIT - 1 :0 ] C0_Big_Kernel_uproad_G7 =   'b111101011011", "label": "            mult_uproad_R4 = C2_mult_uproad_R4;"}
{"generated": "RegWriteD='b0;jump='b0;end end end end end endmodule", "label": "RegWriteD='b0;"}
{"generated": "\t.jmp_addr(jmp_addrTop), \t.im_gen(im_genTop)\t);\t\t// Counter \tcounter counter \t(\t.clk(clk), \t.reset", "label": "\t.reset(reset), "}
{"generated": "_out;", "label": "   #100 Data_in=3'b011;"}
{"generated": "wire [63:0] DATA;", "label": "  wire [63:0] x1_projection;"}
{"generated": "                                                                                                                                                                                                                                       RegDst = 0;", "label": "        RegDst = 0;"}
{"generated": " end else begin\r                    state_nxt = IF;\r                end\r            end\r            MULTI: state_nxt = IF;\r            default: state_nxt = IDLE;\r        endcase\r    end", "label": "                    if(ReadData1 == ReadData2) next_PC = PC + {i_IMEM_data[31], i_IMEM_data[7], i_IMEM_data[30:25], i_IMEM_data[11:8],1'b0};\r"}
{"generated": "to generate the different input combinations\r   begin\r    {A,B}=i;\r    #10;\r   end\r end\r \r initial #50 $finish;\r \r", "label": " initial #50 $finish;\r"}
{"generated": "0] next_temp_money;\r", "label": "            if(pls && !pulse) begin\r"}
{"generated": "input wire [XLEN-1:0] i_id_op1;", "label": "input wire [XLEN-1:0] i_id_op1;"}
{"generated": "generatefor(i=0; i<32; i=i+1) beginif(i==0) ", "label": "endgenerate"}
{"generated": "                           count_val <= 16'b0;", "label": "            count_val = 16'b0;            \r"}
{"generated": "tb();", "label": "wire diff,bor;"}
{"generated": "fifo_empty_state = 3'b101,\r\rload_after_empty = 3'b110,\r\rfifo_empty_state_2 = 3'b111;\r\r\r", "label": "check_parity_error = 3'b110,\r"}
{"generated": "KeyboardCtrl_0 (", "label": "                        next_ball_v_x = 20;"}
{"generated": "sav),", "label": "        repeat (50)"}
{"generated": "\u4f4e\u7535\u5e73\u5199\uff0c\u9ad8\u7535\u5e73\u8bfbwire          op_addr    ;  //\u5bc4\u5b58\u5668\u5730\u5740wire  [4:0]  op_wr_data;  //\u5199\u5165\u5bc4\u5b58\u5668\u7684\u6570\u636ewire  [1", "label": "    .op_rd_data (op_rd_data),   "}
{"generated": "= attempt1;\r\t\t\t\t\t\t\r\t\tattempt2: \t\tif (isCorrect == 1 && Enter == 1) Y = match;\r\t\t\t\t\t\t\telse if (isCor", "label": "\t\tattempt2: Y = attempt2;\r"}
{"generated": "_result;    // Result of the modulo operation\r    wire mod_done;             // Done signal indicating the completion of the modulo operation\r    // Instantiate modules for SUBTRACT and LOAD operations\r    subtract", "label": "    mod_dp datapath(\r"}
{"generated": "reg [3:0] state /* synthesis noprune", "label": "always @(posedge clk)"}
{"generated": ".v", "label": "    input [31:0] writeData,"}
{"generated": "item = 4'b0010;\rparameter keyin_card = 4'b0011;\rparameter decide_howmuch = 4'b0100;\rparameter put_in = 4'", "label": "\t\t\t\t\telse if(id_card1 == 2 && money_card2 >= 1000 && flag == 0) begin\r"}
{"generated": "module top_e2prom(", "label": "module top_e2prom("}
{"generated": "                   case(_i)", "label": "                free_note <= _i;"}
{"generated": "   #200 $finish;  end  // Dump variables and count value  initial begin    $dumpfile(\"jc_tb.vcd\");    $dumpvars(0, tb_johnson_counter);   ", "label": "    #200 $finish;"}
{"generated": "(", "label": "          8'b00000001 :Data_out=3'b000;"}
{"generated": "'b0;", "label": "    reg [31:0] rom_mem [0:255];"}
{"generated": "[INADDRESS])  end  end  //assigning the output to the register value  assign OUT1 = regFile [OUT1ADDRESS];  assign OUT2 = regFile [OUT2ADDRESS]; ", "label": " assign #2 OUT1 = regFile[OUT1ADDRESS];"}
{"generated": "vator2,", "label": "  reg reset_elevator2;"}
{"generated": "                   end", "label": "            patternB = patternB + 1;"}
{"generated": "of candidate 3", "label": "counter ct2(.clk(clk), .clear(rst), .i_enable(i_over), .i_in(i_candidate_2), .o_out(o_count2));"}
{"generated": "               ram[wr_pos] <= data_in;", "label": "                ram[wr_pos] <= data_in;"}
{"generated": "endm", "label": "    i_mac_valid <= 'd1;"}
{"generated": "iene la pendenza costante, essendo lo slope = 1\r    end\r  end\r\t\rendmodule\r", "label": "module acc_pipe(X1, X2, X3, X4, Y, ready, valid, ready_out, valid_out, clk, arst);\r"}
{"generated": "   ,", "label": "    and Gate2(C1,X,Y);"}
{"generated": "       if(rst_i) begin", "label": "        if(rst_i) begin"}
{"generated": "`timescale 1ns/10psmodule full_adder_tb;\t// Your code goes here.  DO NOT change anything that is already given! Otherwise", "label": "\tinitial begin"}
{"generated": "_ALUCtrl(    .ALUOp(),    .funct7(),    .funct3(),    .ALUCtl());ALU m_ALU(    .ALUctl(),    .A(),    .B(),", "label": "    .memWrite(),"}
{"generated": "   <= 1'b0;\t\t\t\toSub    <= 1'b0;\t\t\t\toGout   <= 1'b0;\t\t\t\toDin_en <= 1'", "label": "\t\t\t\t\t\t\t3'b001: begin"}
{"generated": "==1)&&(dut.block_2.mem[85]==0)&&(dut.block_2.mem[86]==0)&&(dut.block_2.mem[87", "label": "         $display(\"THE SIMULATION HAS  SUCCESSEDED AT  TIME%0t \",$time);   "}
{"generated": ";\r", "label": "\t\t.rd0_value_i(rd0_value_i),\r"}
{"generated": "parameter WIDTH = 32;", "label": "parameter din0_WIDTH = 14;"}
{"generated": "50;\t\t\tend\t\t\t#650;\t\t\tfor(i=0; i<255; i=i+1)\t\t\tbegin\t\t\t \tData_in = test", "label": "\t\tsearch_count = search_count + 1;"}
{"generated": "               r_SM_Main <= RX_DATA_BITS;\r", "label": "            if (i_RX_Serial == 1'b0)\r"}
{"generated": "module ArrayMultiplier_tb;", "label": "module half_adder(input a, b, output s0, c0);"}
{"generated": "module stimuli();", "label": "module stimuli("}
{"generated": "if (Ep)", "label": "\t\t\to_val <= o_in;"}
{"generated": "synopsys translate_on", "label": "\talways @(*)begin "}
{"generated": ";        #10 rst = 1'b1;        #10 rst = 1'b0;    end    // Generate a 100 ns delay    #100;    // Generate a ", "label": "    $dumpvars(0, processor_tb);"}
{"generated": "case(state)", "label": "case( state )  "}
{"generated": ".ENABLE(run),\t  .READ((!input_not_ready) && (!output_not_ready) && logo_valid && (vlocation_reg >= logo_vlocation_begin) && (hlocation_reg >=", "label": "\t  .READ(M_AXIS_TREADY_VIDEO && M_AXIS_TVALID_VIDEO),"}
{"generated": "                   if(port_addr == SOF_BYTE) begin", "label": "                ovr_rd_en = 0;"}
{"generated": "   reg [15:0] RO0_counter_val, RO1_counter_val;\r", "label": "    (* DONT_TOUCH = \"true\" *) wire RO0_out, RO1_out;\r"}
{"generated": "(~fifo_empty_1))||                            (pkt_valid && (data_in[1:0]==2) && (~fifo_empty_2)))                                            NS = WAIT_TILL_", "label": "        CHECK_PARITY_ERROR:"}
{"generated": ")begin", "label": "input   wire            CLK;"}
{"generated": "input [address:0]write_ptr;", "label": "input [address:0]write_ptr;"}
{"generated": "end\r            ST_DATA: begin\r                if(ctrl_data_run == 1'b0)\r                    nxt_state = ST_VSYNC;\r                else\r                    nxt_state = ST_", "label": "\t\tif (tempG0 < 0)\r"}
{"generated": " reg [7:0] r_TX_Byte = 0;\r  reg [7:0] r_RX_Byte = 0;\r  reg r_RX_DV = 0;\r  reg r_TX_", "label": "  wire w_TX_Active, w_UART_Line;\r"}
{"generated": "5:23] ;    Exponent = Temp_Exponent+1'b1 ;  end  else begin     Mantissa = Temp_Mantissa[44:23] ;    Exponent = Temp_Ex", "label": "     Exponent =  Temp_Exponent; "}
{"generated": "module flipflop(q, clk, rst, d);output q;reg q;input clk, rst, d;always @(posedge clk or pos", "label": "module flipflop(q, clk, rst, d);"}
{"generated": "    assign GSR = GSR_int;", "label": "    assign (strong1, weak0) GSR = GSR_int;"}
{"generated": "       .feed(feed_w)    );endmodule", "label": "        .feed(feed_w)"}
{"generated": "control_in_2[0] ) ;", "label": "\t\t\t\t\tspi_addr[7:0] <= buffer;"}
{"generated": "3;  wire n114;  wire n115;  wire n116;  wire n117;  wire n118;  wire n119;  wire n12;", "label": "  sky130_fd_sc_hd__nand2_2 U31 ("}
{"generated": "           default: sseg = 7'b1111111;", "label": "module decoder_generic"}
{"generated": "\t\tif(num == 4'd15)", "label": "\t\tif(num == 24'h000000)"}
{"generated": "0;\t\ttap_num_count <= 0;\tend\telse begin\t\tif(ap_start)begin\t\t\tif(FF_en)begin\t\t\t\tif(tap_num1", "label": "\t\t\t\tcount <= count + 1;"}
{"generated": "32)?4'b1110:                             ((len==DM_Byte32)?4'b1101:                             ((len==DM_HalfWord64)?4'b1011", "label": "\t\t\t\t  (m_data_byteen==4'b1000)?{{24{Din[31]}},{Din[31:24]}}: "}
{"generated": ":0] data_out;\routput reg ram_ack;\r\r", "label": "\telse ram_ack <= 0;\r"}
{"generated": "   );", "label": "   in_reset     <= values[4];"}
{"generated": "\u5236\r\t.Pword(Pword),//\u970d\u5c14\u63a7\u5236\r\t.DA_Data(DA_Data),//AD\u6570\u636e\r\t.clk_div(clk_div),//\u65f6\u949f\u5206\u9891\r\t.", "label": "\talways #10 clk = ~clk;\r"}
{"generated": "", "label": "                7'b0000100: note = `MI + _oct;"}
{"generated": "extend(.in(register_bank_read_data_1), .out(sign_extend_out));", "label": "\t\t\t\tALU_out = ~ (input_1 | input_2);\r"}
{"generated": "           if (wraddr_enb==1'b1)begin                AWVALID <= 1'b1;                AWADDR<=mwrite_address;                AWPROT<=3'b00", "label": "            AWADDR<=mwrite_address;"}
{"generated": "= 32,\tparameter integer DATA_DEPTH = 7)", "label": "\toutput wire s_axi_ctrl_arready,"}
{"generated": "       .IDATAIN(1'b0),                 // 1-bit input: Data input from the slave ODELAY DATAOUT", "label": "    output wire         ref_signal,"}
{"generated": "default : Control <= 4'bxxxx;\r", "label": "default : Control <= 4'bxxxx;\r"}
{"generated": "wire [15:0] b;\t\t\tfull_subtractor f0 (.A(X[0]),.B(Y[0]),.C(1'b1),.Bo(b[0]),.", "label": "\tsubtractor_4_bit s3 (.X(X[11:8]),.Y(Y[11:8]),.Bi(b[1]),.Bf(b[2]),.Z(Z[11:8]));"}
{"generated": "  LAST_NOT_A;   reg [BITS-1:0]\t   LAST_MEM;   reg [BITS-1:0]\t   LAST_MEM_A;   reg [BITS-1:0", "label": "   task latch_inputs;"}
{"generated": "  always @(posedge clk or posedge rst) begin", "label": "always @(posedge clk or negedge rst) begin"}
{"generated": ")rdval = temp_hi;endalways@(posedge clk,posedge rst)  beginif(rst == 1)rdval = 0;else if (opcode == 13)rdval = y", "label": "\t else if (opcode == 4)"}
{"generated": ")\r", "label": "\t\t\tPS2_STATE_4_TRANSMIT_STOP_BIT\t\t= 3'h4,\r"}
{"generated": "       assign input4_image = (enable_max_pool && (rowCount_image < `IMAGEROW))?                imageArray[count_image + `IMAGEROW + 1][3:0", "label": "    assign input4_image = (enable_max_pool && (rowCount_image < `IMAGEROW))?"}
{"generated": "           miss_count <= miss_count + 1;", "label": "            miss_count <= miss_count + 1;"}
{"generated": "_BITS_buffer), .DATA_BITS_MB(DATA_BITS_buffer)) buffer_inst (", "label": "    .clk(dummy_clock),"}
{"generated": "       for (c=0;c<=25;c=c+1) begin", "label": "        a = {master_key[66:0],master_key[79:67]};"}
{"generated": "   SPI_SLAVE #(.MEM_DEPTH(MEM_DEPTH), .ADDR_SIZE(ADDR_SIZE)) spi_slave (\r", "label": "    SPI_SLAVE #(.ADDR_SIZE(ADDR_SIZE)) SLAVE (.CLK(clk), .RST(rst_n), .SS_n(SS_n), .MOSI(MOSI),\r"}
{"generated": "k[5], out_Pk[5][<=15>][<=15>][<=15>][<=15>][<=15>][<=15>][<=15>][<=15>", "label": "black_cell Arr2_black_cell2(in_Pk[4], in_Gk[4], in_Pk[6], in_Gk[6], out_Gk[6], out_Pk[6]);\r"}
{"generated": "   half_adder H2(S[2], S[3], P[2], Carries[1]);", "label": "    half_adder H2(S[2], S[3], G[0], Carries[1]);"}
{"generated": "1'b1))        begin        valid=1'b1;        end      end", "label": "valid=1'b1;"}
{"generated": "000000: begin\t\t\t\t{branch, MemRead, MemtoReg, MemWrite, ALUSrc, RegWrite, ALUOp_out} <= 7'b0000001", "label": "\t\t\t\tRegWrite <= 0;\r"}
{"generated": "00000000001,32'bx,32'h00000001,32'h0000_0001,3'b00", "label": "#10 test_bench(32'b000000_00000_00001_00000_00011_000000,32'bx,32'h111,32'h888,3'b000);"}
{"generated": "else if (op_code==16)begin\t\tmul_high=mul[31:16];\t\tmul_low=mul[15:0];end\tend\telse if (op_code == ", "label": "\telse if (op_code == 4'b0110 )begin\t"}
{"generated": "SS_0_Reset wires:    wire       SystemControl_SS_Reset_SS_0_to_SS_0_Reset_reset;    // SystemControl_SS_Reset_SS_1_to_SS_1", "label": "    wire [3:0] Student_SS_2_PSEL;"}
{"generated": "'bxxx;\r", "label": "\t\tflagC = 1'b0;\r"}
{"generated": "", "label": "                    r = eqa ^ b;"}
{"generated": "initial begin", "label": "initial begin"}
{"generated": ":0] din_reg;\t  always @(posedge dphy_clk) begin\t    din_reg <= din;\t  end\t  assign iserdes_din = din_reg;\tend else begin\t", "label": "\t\tif (areset)"}
{"generated": "4, 24'h5, 24'h6, 24'h3};", "label": "parameter ALMOST_FULL_GAP = 3;"}
{"generated": "  always @ (posedge clk) begin\r", "label": "  always @(posedge clk ) begin\r"}
{"generated": "           ARREADY<=1'b0;", "label": "       clk = 1'b0;"}
{"generated": "--               |              |               | 3.390625ns 1 pixel 10 bits                                                                                                                  //////////////////////////////////////////////////////////////////////////////////", "label": "--  O->vertical line total length :vert_line"}
{"generated": "       hecatia_y = 120;    #100;    player_x = 110;    player_y = 110;    moon_x = 70;    moon_", "label": "    hecatia_y = 120;"}
{"generated": "acc_x,", "label": "                        new_ball_v_y <= tmp_new_ball_v_y;"}
{"generated": "       if (reset) begin MotorPlus <= 0; MotorMinus <= 0; end", "label": "        if (reset) begin"}
{"generated": "\t\t\twptr_gray <= {(AddWidth+1){1'b0}};\t\t\t\t\t\t//clean all wptr_gray", "label": "#(parameter"}
{"generated": "I_WDATA;\t\t\t2: heigth_reg <= S_AXI_WDATA;\t\t\t3: logo_hlocation_begin_reg <= S_AXI_WDATA;\t\t\t4", "label": "\talways @(posedge S_AXI_ACLK)"}
{"generated": "   clkgen_200kHz clkgen(        .clk_100MHz(CLK100MHZ),        .clk_200kHz(w_200kHz)    );", "label": "    clkgen_200kHz cgen("}
{"generated": "    #10 p_in=4'b0101;", "label": "d_ff d3(.clk(clk),.din(o3),.dout(dout),.rst());"}
{"generated": "           approaching <= 0;", "label": "        approaching <= 0;"}
{"generated": "030014;\t#30;\tmips.Mem[3]=32'h28040014;\t#30;\tmips.Mem[4]=32'h", "label": "\tmips.Mem[5]=32'h20022200;"}
{"generated": "'b01: fifo_full=full_1;                \r\t\t\t2'b10: fifo_full=full_2;                \r\t\t\t2'b11: fifo_", "label": "\tsoft_reset_1<=0;\r"}
{"generated": "] ,         \\target1_array[4][2] , \\target1_array[4][1] , \\target1_array[4][0] ,         \\target2_array[1][2] , \\target", "label": "        \\U3/U161/Z_6 ) );"}
{"generated": "parameter WIDTH=4;\r", "label": "parameter WIDTH=4;\r"}
{"generated": "                                                                                                                                                                                                   output                               PREADY,    output                               PSLVERR,", "label": "    output                              PREADY,"}
{"generated": "a row", "label": "wire signed[OUT_WIDTH-1:0] conv0, conv1, conv2, conv3;"}
{"generated": "automatically maintained\r", "label": "and(c1, A[0], B[1]);\r"}
{"generated": "3, n74,         n75, n76, n77, n78, n79, n80, n81, n82, n83, n84, n85", "label": "  AO22_X1M_A9TR U33 ( .A0(N41), .A1(n410), .B0(N16), .B1(s), .Y(d[4]) );"}
{"generated": "_1=0;\r", "label": "\t\t\tComparator_Grt_3  =0;\r"}
{"generated": "'b1;", "label": "\t\tpower1 <= 1'b0;"}
{"generated": "ena(cached&refresh|sram_en&bank_sel[9]&hit[0]|write_back),     // 1        .wea(refresh?lru?4'b0000:4", "label": "        rdata_way1[8],"}
{"generated": "       if(OpCode==BEQ)begin\r", "label": "        case(OpCode)\r"}
{"generated": ": 0] stall_count;(* mark_debug = \"true\" *) reg  [XLEN-1 : 0] stall_count_reg;(* mark_debug = \"true\" *) reg  [XLEN", "label": "reg main_start, main_end;"}
{"generated": "input match;", "label": "output reg [ENTRY_WIDTH-1:0] match_addr;"}
{"generated": "pmem_instance (        .CLK(clk),        .D(mem_in),        .Q(pmem_out),        .CEN(!(pmem_rd||pmem_wr)),        .WEN(!p", "label": "  always @(posedge clk) begin"}
{"generated": "   if (~rst_n) begin", "label": "    if (~rst_n) begin"}
{"generated": "(\"PC=%h, IR=%h, NPC=%h, A=%h, B=%h, type=%h, ALUOut=%h, cond=%h\", mips.PC, mips.IF_ID_IR,", "label": "\t#600 $finish;"}
{"generated": "", "label": "parameter hold =  2'b10,"}
{"generated": "       #10 a = 1; b = 1; c = 1;    #10 a = 0; b = 0; c = 0;    #10 $finish;endendmodule", "label": "    #10 a = 1; b = 1; c = 1;"}
{"generated": "^N) states in the state machine\r", "label": "wire [23:0]data;\r"}
{"generated": "_increment<=4'b0;\r", "label": "\t\t\t\t4'b0101: alu_out <=a|b;\r"}
{"generated": "       a = 1'b1; b = 1'b0;\r        #100\r        // Test case 4\r", "label": "        a = 1'b1; b = 1'b0;\r"}
{"generated": "_VECTOR_LSB] = `ALU_OPCODE_LT;                    end                     `FUNCT3_BGEU_C: begin                        o_control_vector[`CTRL_ALU_VECTOR", "label": "            `OPCODE_LUI_C, `OPCODE_AUIPC_C: begin"}
{"generated": "                                                                   (alu_op == ALUOP_SLL) ? (op1 << op2[4:0]) :", "label": "                    (alu_op == ALUOP_SLL) ? (op1 << op2[4:0]) :"}
{"generated": "for loop is used to generate the different input combinations\r   begin\r    {A,B}=i;\r    #10;\r   end\r end\r \r initial #50 $finish;\r \r", "label": " initial #50 $finish;\r"}
{"generated": "vess),\\    .LIT_OUT (`LIT_OUT vess) \r) u_R4 (\r    .clk(clk vess),\\    .rst_n(rst_n vess),\\    .LIT_in", "label": "    .LIT_OUT (`LIT_OUT)\r"}
{"generated": "110;  // sub            // case bne             2'bx0:                ALUCtl <= 4'b0001;  // and            // case or              2'b01:               ", "label": "                                ALUCtl <= 4'b0000;"}
{"generated": ";    else if (ri_mac_valid)        r_arp_op <= i_mac_data[15:10];    else        r_arp_op <= 'd0;end// trig_replyreg", "label": "    else if (r_arp_cnt >= 6 && r_arp_cnt <= 7 && ri_mac_valid)"}
{"generated": "  alu_slice _i6 (op, i0[6], i1[6], c[5], o[6], c[6]);   alu_slice _i7 (op, i0[7], i", "label": "   alu_slice _i6 (op, i0[6], i1[6], c[5], o[6], c[6]);"}
{"generated": "              4'b1101: group1 = 4'b1101;        4'b1110: group1 = 4'b1110;        4'b111", "label": "        4'b1101: group1 = 4'b1101;"}
{"generated": "two;            3: l1 = `three;            4: l1 = `four;            5: l1 = `five;            6: l1 = `six;            7: l1 = `seven;            8:", "label": "            4: l1 = `four;"}
{"generated": "ALUOut_WIDTH  = 32)", "label": "output reg                                   Zero_flag "}
{"generated": ":0][KEY_FIELD_WIDTH-1:0]      w_typeRule_keyField;\r  wire  [KEY_OFFSET_WIDTH-1:0]                         w_typeRule_keyOffset;\r  wire  [", "label": "  genvar idx;\r"}
{"generated": "endmodule", "label": "    initial begin"}
{"generated": "\t\t\tnextState = Shift;", "label": "                 if(flag1 == 1'b1)"}
{"generated": "WIDTH = 1,", "label": "                              ( (USE_RESET_REQUEST_IN2 == 1) ? reset_req_in2 : 1'b0)  |"}
{"generated": "], load_hz_mux_out, wb_out[36:5], mux_dh2_out, last_mux_out, clk, rst, wb_out[36:5], w", "label": "    forwarding_unit        fu(id_dh_out, id_out[9:5], ex_out[4:0], wb_out[4:0], ex_out[106], wb_out[70], fa, fb);\r"}
{"generated": ":  1  :  1    ; // reduce pessimism        endtableendprimitive`endif // NO_PRIMITIVES`default_nettype wire`endif  // SKY130_FD_SC_", "label": "`define SKY130_FD_SC_HD__UDP_MUX_2TO1_V"}
{"generated": "   output reg [31:0] RDATA,    output reg [1:0] RRESP,    output reg RVALID,    input wire RVALID_IN,    // write address channel    input wire AWVALID,", "label": "    output reg [31:0] RDATA,"}
{"generated": "//assign Y = (controlsignal == 4'b0000) ? (A1 & A2) : ((controlsignal == 4'b000", "label": "assign zero = (Y == 0) ? 1 : 0;\r"}
{"generated": "ram_rd_a_res_BITS_1_TO_0__q1;  wire [1 : 0] rg_ram_rd_b_res_BITS_1_TO_0__q0; ", "label": "      10'd92: rg_ram_rd_a_res$D_IN = rd_data_vec_rga[185:184];"}
{"generated": "_pulse;", "label": "        clk = ~clk;"}
{"generated": "endmodule", "label": "    if (s2 == 3'b000|| s2 == 3'b001|| s2 == 3'b010 || s2 == 3'b100) begin"}
{"generated": ") u_apb_sram (", "label": ") u_ahb_lite_ms_model ("}
{"generated": "    // 000010: r-types", "label": "    InstructionMem IMEM(pc, instOut);"}
{"generated": "module router_fifo(", "label": "      else if(write_enb&&(~full))   "}
{"generated": ",    output reg [31:0] Data1_MEM,    output reg [31:0] Data2_MEM,    output reg [4:0] Rs_MEM,    output reg [4:0] R", "label": "            MemWrite_MEM <= 0;"}
{"generated": "  initial begin ", "label": "  parameter st=400;"}
{"generated": "l/isp.v", "label": " assign rempty_val = (rgraynext == rq2_wptr);"}
{"generated": "   reg[7:0] A,B;", "label": " reg[7:0] A,B;"}
{"generated": ";\t\tend\t\tfor(i = 0;i< 1024;i=i+1)begin\t\t\tdata[i] <= 0;\t\tend\tend\telse begin\t\tif", "label": "\t\t\t\t\tsymbol <= symbol + 1;"}
{"generated": ";\r", "label": "\t\t\t\t .read_enb_0(read_enb_0), \r"}
{"generated": "8], COUT[8]);    ALU1 ALU9(A[9], B[9], COUT[8], AInvert, BNegate, 0, Op, Result[9], COUT[9]);", "label": "    ALU1 ALU9(A[9], B[9], COUT[8], AInvert, BNegate, 0, Op, Result[9], COUT[9]);"}
{"generated": "  always @(posedge clk) begin", "label": "  task test_serin;"}
{"generated": "_wren),    .user_w_mem_8_full(user_w_mem_8_full),    .user_w_mem_8_data(user_w_mem_8_data),    .", "label": "\t\t  .user_clk(user_clk),"}
{"generated": "wr_addr == (rd_addr + depth));  always @(posedge rdclk or negedge rd_aclr) begin  if (~rd_aclr) begin  rd_addr <= 0;", "label": "      for(integer idx=0; idx<words; idx=idx+1)"}
{"generated": "   always @(posedge clk) begin", "label": "    genvar idx;"}
{"generated": "       reg clk;", "label": "        initial wb_clk = 0;"}
{"generated": "     2'b10: current_digit <= dig2;\r      2'b11: current_digit <= dig0;\r    endcase\r  end\r  always @(posedge clk_out, posedge r", "label": "      2'b10: current_digit <= dig2;\r"}
{"generated": ": // // // // // // // // // // // // // // // // // // //", "label": "        if(cnt==8'd24)begin"}
{"generated": "buses();\t end      end   end   endmodule", "label": "\t LAST_CLK = _CLK;"}
{"generated": "             mem_copy[i] = 9;              if (mem_copy[i] == 9) begin                  we = 1;                  datawr = mem_copy[i];                  addr = i;                ", "label": "          mem_copy[i] = 9;"}
{"generated": "   always @(posedge clk) begin", "label": "    reg [31:0] Gap;"}
{"generated": "                                                                                 input  [D_BITS-1 :0] w_data,\r", "label": "                   output               r_empty,\r"}
{"generated": "        ram[addrb", "label": "        ram[addrb] <= dib;"}
{"generated": "       end", "label": "        end else begin"}
{"generated": "= 8'b0; insts[23] = 8'b0;        insts[24] = 8'b0; insts[25] = 8'b0; insts[", "label": "        insts[28] = 8'b0; insts[29] = 8'b0; insts[30] = 8'b0; insts[31] = 8'b0;"}
{"generated": "   end    always @ (posedge inputObj) begin        if(Index > 0) begin            if(dataBit == 0) begin                dataBit <= 1;                outObj <= 1;            end           ", "label": "    always @ (X) begin"}
{"generated": "  \tinitial begin    ", "label": "  \tinitial begin    "}
{"generated": "Comments: // //////////////////////////////////////////////////////////////////", "label": "module half_sub("}
{"generated": "   .net_ro(node0_ro_net)\r", "label": "    always @(posedge clk) begin"}
{"generated": "axi_awready <= 1'b1;\r\t      else\r\t        axi_awready <= 1'b0;\r\t      aw_en <= 1'b0;\r\t    end \r\tend\r\t", "label": "\t  if ( S_AXI_ARESETN == 1'b0 )\r"}
{"generatedr_SM_Main", "label": "              r_SM_Main <= s_IDLE;"}
{"generated": "   xor x3(B2,B[2],m);    xor x4(B3,B[3],m);    and a1(c0,A[0],B0);    and a2(", "label": "    xor x3(B2,B[2],m);"}
{"generated": "posedge memwrite) data_mem[address] <= write_data;\rendmodule", "label": "    if(memwrite)\r"}
{"generated": "begin", "label": "\treg [31:0] newHipAdd;"}
{"generated": "\r    assign Sign=((OpCode==LUI)||(OpCode==ADDIU)||(OpCode==ANDI)||(OpCode==ORI))?1:0;\r", "label": "    assign Jump=(((OpCode==R)&&((Funct==JR)||(Funct==JALR)))||((OpCode==J)||(OpCode==JAL)))?1:0;\r"}
{"generated": "\t.MemWrite(MemWrite)\r", "label": "\t\t.RegWrite(RegWrite),\r"}
{"generated": "#10 A=1; B=0; K2 = 1; K1 = 0; K0 = 1; Cin = (K1);", "label": "#10 A=1; B=0; K2 = 1; K1 = 0; K0 = 1; Cin = (K1);"}
{"generated": "Temp_Mantissa<<1; // left shift          exp_adjust = exp_adjust-1'b1; // after left shifting we decreased the exponent by one     end      end  Mantissa = Temp_Mantissa", "label": "           exp_adjust =  exp_adjust-1'b1;"}
{"generated": "\t\tmem_8x8_1[j+8*5],\r", "label": ".Data_In(In_Data),\r"}
{"generated": ", o, stage_2, stage_1} <= {o, stage_2, stage_1, i};\rendmodule", "label": "   input  wire            a_wr,\r"}
{"generated": "   assign a[1] = num[1] & ~num[2] & ~num[3] & ~num[4] & ~num[5] & ~num[6] & ~num[7];", "label": "    assign a[1] = num[1] & ~num[2] & ~num[3] & ~num[4] & ~num[5] & ~num[6] & ~num[7];"}
{"generatedoutput [n - 1:0] s, c_out   ", "label": "    output [n - 1:0] s,"}
{"generated": ");\t\tendmodule", "label": "\t\t.din (din),"}
{"generated": "   case (in)", "label": "        for (out = 0; out < IN_SIZE && in[out] !== 1; out = out + 1) begin"}
{"generated": "always @ (posedge clk) begin    if (clear==0) begin        Cout <= 4'b1111;    end    else begin        if (Cout==0) begin            Cout <= 4'", "label": "     always @ (posedge clk) "}
{"generated": "\t\tmem_8x8_1[j+8*5],\r", "label": "Data_1_Sub_6_G,\r"}
{"generated": "begin        case (OutASel)            2'b00: OutA <= Q_PC;            2'b01: OutA <= Q_AR;            2'b10: OutA <= Q_SP;", "label": "    Memory _Memory("}
{"generated": "\t.in3(z[3]),\t.s(s3),.c(c3));full_adder f4(.in1(s1),.in2(s2),\t.in3(s3", "label": ".in3(z[3]),\t"}
{"generated": "*", "label": " * Verilog primitive definition."}
{"generated": ".\r", "label": "                        state <= AB;\r"}
{"generated": "//                                                ", "label": "input [5:0] Funct,"}
{"generated": "                                                                                                                                                                   .clk_out(clk_out)    );", "label": "    .clk_out(clk_out)"}
{"generated": "PM// Design Name: // Module Name: Block_Rom// Project Name: // Target Devices: // Tool Versions: // Description: // Dependencies: // Revision: // Revision 0.01 - File Created ", "label": ">>>>>>> 7ab1cd2eac5cb73e977a5e807d15ffd88a70e749"}
{"generated": "reg \t[RAM_WIDTH-1:0]\t\treg_data_out;wire\t[RAM_ADDR_BITS-1:0]\t\tmem_addr;wire\t[RAM_WIDTH-1", "label": "reg\t\t[4:0]\t\t\t\topcode;"}
{"generated": "Shift_Register_tb// Project Name: Lab5b_Shift_Register// Target Devices: // Tool Versions: // Description: // // Dependencies: // // Revision: // Revision 0.01 - File", "label": "    reg [7:0] inp=10;"}
{"generated": "", "label": "            $time, x, y, cin, s, cout, overflow);"}
{"generated": "JALR_BITS)) begin", "label": "    always @(*) begin"}
{"generated": ", reg_alu);\r    input [7:0] a, b, c;    input s, reset, clk;    output reg [7:0] reg_c1, reg_alu;\r    always @ (posedge clk", "label": "    wire [7:0] w1, w2;\r"}
{"generated": "                                                                                                                                                                                                                                //     E            ( pixel_x>=211 && pixel_x<=310 && pixel_y>=130 && pixel_y<=150", "label": "               ( pixel_x>=119 && pixel_x<=139 && pixel_y>=130 && pixel_y<=230 )||"}
{"generated": "   (* DONT_TOUCH = \"true\" *) not not_0 (not_0_out, RO_out_feedback);\r", "label": "     (* DONT_TOUCH = \"true\" *) not not_0 (not_0_out, nand_out);\r"}
{"generated": "Ram_in, Ram_out, Address, Write, Read);", "label": "\t\tassign\tout = value;"}
{"generated": "", "label": "\t\t\t\tsample <= 0;"}
{"generated": "clk_1KHZ;", "label": "    end else if(r_clk_cnt == (P_CLK_DIV_CNT >> 1) - 1) begin"}
{"generated": "always @(posedge clk_out or posedge rst) begin\r    if(rst) begin\r        interrupt_flag <= 0;\r    end\r    else begin\r        if(btn_shift == 1'b", "label": "assign detect = ~btn_shift & btn_debounce;  \r"}
{"generated": "())\r\t\t\t\t// synopsys translate_on\r\t\t\t\t,\r\t\t\t\t.clr ())\r\t\t\t\t);\r\t\r\tendmodule\r\t\t\t\t\t\t\t\t\t\t\t", "label": "\t\tLPM_MUX_component.lpm_widths = 1;\r"}
{"generated": "module case(", "label": "module verilogcase("}
{"generated": "and and7(na0_b0 , a0_inv , B[0]);", "label": "and and7(na0_b0 , a0_inv , B[0]);"}
{"generated": "       GTS_int = 1'b0;\tGRESTORE_int = 1'b0;\t", "label": "\tGSR_int = 1'b0;"}
{"generated": "               EX_MEM_MemRead<=ID_EX_MemRead;\r", "label": "            EX_MEM_MemRead<=ID_EX_MemRead;\r"}
{"generated": "       counter<=counter+1;", "label": "        counter<=counter+1;"}
{"generated": "StallF = lwstall | branchstall;", "label": "StallF  = lwstall || branchstall ;"}
{"generated": "module rw_result_led(", "label": "module rw_result_led "}
{"generated": "       for(k=0;k<32;k=k+1)", "label": "    for(k=0;k<32;k=k+1)"}
{"generated": "    always @(posedge CLK) begin", "label": "reg CMP_Flag_Comp;"}
{"generated": "31:0] A, B;\r", "label": "    .ALUop(ALUop), \r"}
{"generated": "ponent = Temp_Exponent + 127;     Sign = B_sign;     end     else begin     Mantissa = Temp_Mantissa[45:23] ;     Exponent = Temp_Exponent", "label": "  else if(Temp_Mantissa[46])begin"}
{"generated": "                   q <= register;            end            join            begin            end            end ", "label": "                q <= register;"}
{"generated": "4ns)", "label": "\t\tinput wire [2 : 0] s00_axi_arprot,"}
{"generated": "id_instr[31:26];assign rs1_valid = (opcode == `OP_ADD || opcode == `OP_SUB || opcode == `OP_SLT || opcode == `OP_SLTU", "label": "                                jmp_pc <= i_if_pc + b_imm;"}
{"generated": "[p3cntr_width-1:0]   depthLess1 = depthLess2 - 1'b1 ;", "label": "             empty_reg <= `BSV_ASSIGNMENT_DELAY 1'b0;"}
{"generated": "       LED1_blinkblink_1 <= 1'b0; //off state\r    end\rend\r", "label": "        LED1_blinkblink_1 <= 1'b0;\r"}
{"generated": "\t: rempty;", "label": "\t\t.O_video_dat \t\t\t\t\t\t(video_dpc_dat\t\t\t)"}
{"generated": ";\r    reg [7:0] c1, alu;\r    always @(posedge clk or posedge reset)\r        if (reset)\r            begin\r                c1 <= 8'b0;\r                alu <=", "label": "    assign w2 = c;\r"}
{"generated": "     input                                               S_AXI_WVALID,      output                                                  S_AXI_WREADY,    output[2:0]                                S_AXI_BRESP,      input                ", "label": "    input                                   S_AXI_WVALID,"}
{"generated": "   assign full = (wptr == rptr) && (wptr[ADDRSIZE-1] == 1'b1);", "label": "        wire [ADDRSIZE-1:0] read_address,"}
{"generated": "$display ( \"732 em binario = %8b\", b3 );", "label": "$display ( \"732 em binario = %8b\", b3 );"}
{"generated": "                        default: out = 0;", "label": "            default: out = 32'b0;"}
{"generated": "tera and sold by// Altera or its authorized distributors.  Please refer to the applicable// agreement for further details.", "label": "      assign almost_empty_data = 0;"}
{"generated": "always @(posedge clk) begin\r       if (reset) begin\r           pipe_x_next <= 0;\r           gap_y_next <= 0;\r       end\r       else if (~freeze) begin\r          ", "label": "        if (pipe_x == 0) begin\r"}
{"generated": "\r    reg [3:0] points ; \r    reg [2:0] state_reg;\r", "label": "    reg [3:0] sum;\r"}
{"generated": ";\r\tspecparam rise$A3$Q\t= 0.000:0.000:0.000;\r\tspecparam fall$A4$Q\t= 0.000:0", "label": "\tspecparam fall$A13$Q\t= 0.000:0.000:0.000;\r"}
{"generated": "   input fifo_empty,    input fifo_full,    input sdio_card_detect,    input sdio_card_insert,    input sdio_card_remove,    input sdio_card_present,", "label": "    input finish,"}
{"generated": " reg [7:0] dat1, dat2, dat3, dat4, dat5, dat6, dat7, dat8;", "label": "  reg [7:0] dat1, dat2, dat3, dat4, dat5, dat6, dat7, dat8;"}
{"generated": "timescale 1ns / 1ps", "label": "\tlocalparam RIGHT = 2'b11;"}
{"generated": "                   initialMax <= input1;", "label": "                if($signed(input2) < $signed(input1)) begin"}
{"generated": ",    input [31:0] REG_MUX_IN,    input [1:0] ALU_CTRL,    input ZERO,    output [31:0] ALU_RESULT    );   reg [", "label": "    input [3:0] ALU_CTRL,"}
{"generated": "input tx_start;", "label": "input tx_start;"}
{"generated": "module RAM_TB();", "label": "module RAM_TB;"}
{"generated": "        {carry,o_ALU_Res_E}={1'b0,U_A%U_B);\r   end\r   end\rdefault : \r   begin\r     {carry,o_ALU_", "label": "     {carry,o_ALU_Res_E}= {1'b0,U_A%U_B};\r"}
{"generated": "= \"PORT_UNUSED\",", "label": "   output                      s0_ren,"}
{"generated": "   #10 rst = 0;", "label": "    #10 rst = 0;"}
{"generated": "'b001},{3'b001},{3'b001}};", "label": "reg\t\t\t\t\t\t\t\trd_rst\t\t;"}
{"generated": "] Coin_count;\r", "label": "output Coffee_LCD_RS;\r"}
{"generated": "] pixel_y;   // y coordinate of the next pixel (between 0 ~ 479)     wire [3:0] rgb;       // RGB value of the next pixel     wire [3:0] r", "label": "  always @(posedge clk) begin"}
{"generated": "\t.clk(clk),", "label": "\tout <= x_vals[i];"}
{"generated": "       end        else begin            if (left_player_input == MOVE_RIGHT) begin                distance = left_player_location - right_player_location;                if (distance > 0) begin                    right_", "label": "        end else begin"}
{"generated": "63:56] <= p_in[31:24);\r", "label": "\treg cpol_0;\r"}
{"generated": " M_DMEM_write_o,    input                 M_DMEM_read_i,    input  [XLEN-1 : 0]   M_DMEM_data_i,    // Aquila external debug", "label": "    output [CLSIZE-1 : 0] M_DMEM_data_o,"}
{"generated": "   assign Cnotes[0] = 540336;", "label": "    assign Cnotes[6]  = 454545;"}
{"generated": "\t\t\t\t\t\t\tpc_en <= 1'b0;\r", "label": "\t\t\t\t\t\tpc_en  <= 1'bx;\r"}
{"generated": "0\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "label": "\t\t\t\tif (last_change == KEY_CODES[8]) key_8  <= 1'b1;"}
{"generated": "lab1.pdf)    // For testbench verifying, Do not modify input and output pin", "label": "            7'b0010011:"}
{"generated": "//-- Bloque 3. Circuito combinacional.//---------------------------------------------------------------------------reg A = 0; reg C = 0;always @(estado_actual) begin    case(estado_actual)        ", "label": "reg A=0; reg C=0;"}
{"generated": "h59;\r        8'h16 : subByteReg = 8'h47;\r        8'h17 : subByteReg = 8'hf0;\r        8'h18 : subByteReg", "label": "        8'h1a : subByteReg = 8'ha2;\r"}
{"generated": "d\", A_in, B_in, answer, overflow_ans);        $display(\"Error: Your answer is A+B = %d + %d = %d, overflow = %d,\",A_in, B_", "label": "        $display(\"Error: Your answer is A+B = %d + %d = %d, overflow = %d,\",A_in, B_in, Sum_o, overflow);"}
{"generated": "23];", "label": "\t.start(start),"}
{"generated": "   end", "label": "        DataOut <= DataOut;"}
{"generated": "                                                                                                                                                                                                                       .masking_byte(masking_byte),        .byte_accessS(byte_accessS));    fetch i_fetch(        .clk(clk),       ", "label": "        .pc_prev_address(pc_prev_address)"}
{"generated": "       count[0] & (!up_down) | ((!count[0]) & up_down)\r", "label": "    assign counter = count;\r"}
{"generated": "                   data_reg[DATA_LENGTH-1:0] <= data_in;", "label": "            data_reg[DATA_LENGTH-1:0]<=data_in;"}
{"generated": "[2:0] intrID,    output reg [2:0] casc,    output reg vecFlag);", "label": "  always @(posedge pulse2 or negedge pulse1)"}
{"generated": "d_ff u1 (.din(s[0]),.clk(clk),.rst(rst),.dout(s[1]));", "label": "d_ff u1 (.din(s[0]),.clk(clk),.rst(rst),.dout(s[1]));"}
{"generated": "           current_state <= IDLE;\r", "label": "            current_state   <= IDLE ;\r"}
{"generated": "_AXI BREADY\" *)    output reg                     m_axi_bready,    (* X_INTERFACE_INFO = \"xilinx.com:interface:aximm:1.0 M_AXI AR", "label": "    if (reset | ctrl_rst) begin"}
{"generated": "d0;        ri_icmp_valid <= 'd0;    endend", "label": "        ri_icmp_valid <= 'd0;"}
{"generated": "           if (~reset_n_i)                counter_data_for_max <= 0                                                                                                 ;", "label": "        if (~reset_n_i)"}
{"generated": ";", "label": "    reg [BIT_WIDTH-1:0] RAM [SIZE-1:0];"}
{"generated": "ALUControl = 3'b000;  3'b001: ALUControl = 3'b010;  3'b010: ALUControl = 3'b10", "label": " ALUControl = 3'b000; "}
{"generated": "uart (", "label": "                    baud_count <= 13'd0;"}
{"generated": "_43 (); // this is a fake decap", "label": " sky130_fd_sc_hd__conb_1 user_proj_example_8 (.VGND(vssd1),"}
{"generated": "               left_player_location = left_player_location;", "label": "                left_player_health = left_player_health + 1;"}
{"generated": "   assign notes2 [3]=146000;     assign notes2 [4]=123333;     assign notes2 [5]=100000;     assign notes2 [6]=8", "label": "    assign notes2 [3]=151685; "}
{"generated": ".dout(data_address_out));    // Requires a register w load enable to store the output of the ALU    vdff_w_load #(16) OUTPUT_REG(.clock(clk),", "label": "    always @* begin"}
{"generated": "reset_n       (reset_sink_reset_n),                        // reset_sink.reset_n\t\t.clk_out_pll_c0     (),                        // adc_pll_clock", "label": "\t) sequencer_internal ("}
{"generated": "\t\tendcase\t\t3:\tcase ({S2,S1})\t\t\t\t2:estado_siguiente=4;\t\t\t\tdefault:estado_siguiente=3;\t\t\t", "label": "\t\t3:\tcase ({S2,S1})"}
{"generated": "                                // 3'b010: Result = A & B;      3'b011: Result = A | B;      3'b100: Result = A ^ B;      default: Result =", "label": "      3'b010: Result = A & B;"}
{"generated": "funct == 6'b000000) || (Op == 6'b000010 && funct == 6'b001000) || (Op == 6'", "label": "    assign sw = (Op===6'b101011);"}
{"generated": "GWE_int;    reg GRESTORE_int;    reg [3:0] DO_int;    reg [3:0] DI_int;    reg [3:0] GRES_int;    reg", "label": "    reg JTAG_RUNTEST_GLBL;"}
{"generated": "_comb = counter + 5'b00001;      end    end    if(counter == 5'b11111)      begin        high = 1'b1;      end    else     ", "label": "  assign high = (counter == 5'b11111);"}
{"generated": "EX_MEM_COND) begin", "label": "initial begin "}
{"generated": "               end", "label": "        $readmemb(\"C:\\\\Vivaldo\\\\Project\\\\image3.txt\", imageArray, 0, 48);"}
{"generated": "hex2char(linha1[27:24][<=4]);\r\tLCD_LINE1+6:\tLUT_DATA\t<=\thex2char(linha1[23:20][<=", "label": "\tLCD_LINE2+9:\tLUT_DATA\t<=\thex2char(linha2[11: 8]); \r"}
{"generated": "   #25 in = 0;    #20 in = 1;    #25 in = 0;    #20 in = 1;    #25 in = 0;    #20 in", "label": "    #25 in = 0;"}
{"generated": ": 1.0", "label": "\talways @(posedge inclk0)"}
{"generated": "6] == 1)begin\r\tcounter1= 3;\r\tend\r\t\telse if(Buffer1[3] == 1)begin\r\tcounter1= 2;\r\tend\r\t\telse if(Buffer", "label": "\telse if((wrote_data3)/10 % 10 == 7 && ((vcount<182 && vcount>174 && hcount == 484)|| (vcount == 175 && hcount > 479 && hcount < 455)))begin\r"}
{"generated": "0] s_axi_wstrb,\r\t\tinput wire  s_axi_wvalid,\r\t\toutput wire  s_axi_wready,\r\t\toutput wire [1 : 0] s_ax", "label": "\t\t.S_AXI_ARVALID(s_axi_arvalid),\r"}
{"generated": "b0;\t\t\tend\t    end else begin\t\t\to_one_sec_tick <= 1'b0;\t    end\tend ", "label": "\t\tend else begin"}
{"generated": "\"a\" \"s\" \"d\" to control charactor", "label": "\t\t.PS2_CLK(PS2_CLK),"}
{"generated": "   fullAdderassign fa1(a[0], b[0], c_in, c_out, sum[0]);", "label": "    {c_out, sum} = a + b + c_in;  "}
{"generated": "] Data_out   ); ", "label": "          3'b001:Data_out=8'b00000010;"}
{"generated": "5])         );  ADDFX1 U2_1 ( .A(A[1]), .B(n3), .CI(carry[1]), .CO(carry[2]), .S(DIFF[1", "label": "        .Y(n264) );"}
{"generated": "      always @(posedge clock) begin", "label": "   assign nBUSRQ = request;"}
{"generated": "'b0000;    end    else if(RegSrc[1])begin        A1 = 4'b0001;    end    else if(RegSrc[0]&&RegSrc[1])begin", "label": "always@(*)begin"}
{"generated": "       clk = 1; reset = 1; wait(10); reset = 0;\r", "label": "        $readmemh(\"memfile.txt\", dut.block_3.Memory,0,71);\r"}
{"generated": "     out[3] <= 0;", "label": "      out[3] <= 0;"}
{"generated": "begin", "label": "\t\t\trunning = 1;"}
{"generated": "rxd = 1;    #10    uart_tx_data = 8'b01000110;    #10    uart_tx_data = 8'b101", "label": "    uart_tx_data = 8'b01000101;"}
{"generated": "blue;      VGA_G <= green;   end   else begin      VGA_R <= 4'h0;      VGA_B <= 4'h0;      VGA_G <= 4'h0", "label": "    .c0        (vga_clk)"}
{"generated": "input [31:0] in_a, in_b;//\toutput [31:0] alu_out;//\toutput zero;//\tinput [3:0] control;", "label": "\t\t\tdefault: begin zero<=0; ALU_result <= A; end"}
{"generated": "] pstrb_i,// Stride signal for APB bus.\tinput wire  [BW-1:0] pwdata_i,// Data signal for APB bus.\tinput wire  [ADDR_W", "label": "  wire [(MAX_DIM*DW)-1:0] vec_a;"}
{"generated": "   Shift_data <= {Data_in, Shift_data[Width-1:1]};", "label": "   Shift_data = {1'bx, Data_in};"}
{"generated": "\t//reg soc_coreclk;\treg soc_coreclk_last;\t//POR reset\t//reg soc_reset;\t//POR reset\t//reg soc_reset_last;\t//POR reset\t//", "label": "\treg \tfpga_axi_wvalid;"}
{"generated": "                                                                                                                                                                                                                       #(GRES_START)", "label": "\t#(GRES_START);"}
{"generated": " MakePositive #(8) mp_inst2 (      .num(num2),      .is_negative(is_negative2),      .num_positive(num_positive2)  );", "label": "  MakePositive #(8) mp_inst2 ("}
{"generated": "       q1 <= ram[address1];     endendendmodule", "label": "        q1 <= ram[address1];"}
{"generated": "   assign addr_idx = addr_true[ADDR_W-1:2];", "label": "    assign addr_invalid = addr_true[ADDR_W] || (addr >= i_ubound);"}
{"generated": ".\r", "label": "always @(posedge clk) begin : pwm_main\r"}
{"generated": "     end", "label": "      else if(!branch) begin"}
{"generated": "   assign data_in_tmp = reset ? 0 : data_in;", "label": "assign data_in_tmp = reset ? 0 : data_in;"}
{"generated": "flag   wire        t_rst = t_flag | h_rst_b;   wire        t_phi2 = t_flag | h_phi2;   wire        t_rdnw = t_flag |", "label": "       rdata <= wdata;"}
{"generated": "                   o_immediate[31:11] = {21{i_cur_instruction[31]}};", "label": "                o_immediate[31:12] = i_cur_instruction[31:12];"}
{"generated": "// \u89e6\u53d1\u6807\u5fd7\u4f4d\u7f6e\u4e3a\u4f4e\u7535\u5e73      pulse <= 1'b1;         // \u8109\u51b2\u6807\u5fd7\u4f4d\u7f6e\u4e3a\u9ad8\u7535\u5e73      end      end      pulse <= 1'b0;        ", "label": "      end else begin"}
{"generated": "/******/ ); // 11-bit comparator", "label": "  output reg match"}
{"generated": "4'h7C88B88479048187;localparam G8_8 = 64'h8808880888088808;/", "label": "                               case(in_out_cnt)"}
{"generated": "   .i_Clock(i_clk),", "label": "   .i_Clock (i_clk),"}
{"generated": ":0] wena;\r    (*KEEP=\"true\"*) wire [3:0] wce;\r    (*KEEP=\"true\"*) wire [3:0] woe;\r    (*KEEP=\"true\"*) wire [", "label": "    assign green = r_green;\r"}
{"generated": "[15:0] ALU_Result;    wire [16:0] tmp;    assign ALU_Out = ALU_Result; // ALU out    assign CarryOut = tmp[16]; // Car", "label": "    wire [16:0] tmp;"}
{"generated": "display(\"test case 11 is failed\");    end      $display(\"test case 12\");  ALU_FUN_tb = 11;  #10  if(A_tb > B_tb)   ", "label": "  if(A_tb > B_tb)"}
{"generated": "010;   6'b000100: ALUControlSignal=3'b011;   6'b001000: ALUControlSignal=3'b100;", "label": "   6'b001000: ALUControlSignal=3'b110;"}
{"generated": "\toutput wire RegDst,\toutput wire MemRead,\toutput wire MemWrite,\toutput wire MemtoReg,\toutput wire ALUSrc1,\toutput wire ALUSrc2,\toutput wire Jump);", "label": "\toutput wire Jump"}
{"generated": "_out;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    (* DONT_TOUCH = \"true\" *) reg [15:0] RO0_counter;    (* DONT_TOUCH = \"true\" *) reg", "label": "                PUF_OUT_REG[31] = 1'b0;"}
{"generated": "w1[i], in0[i], sbar);     and G01 (w2[i], in1[i], ~sbar);     or  G02 (out[i], w1[i], w", "label": "     or  G2  (out[i], w1[i], w2[i]);"}
{"generated": "            //mode = IMR          begin                                                     mode = 3'b010;                data = IMR;             //write IMR to CPU          end        3'b011:                             //mode", "label": "              chosen_index = (3 * 2) + 1;             "}
{"generated": "               j: rotor_1_output = k;", "label": "    j: rotor_1_output = k;"}
{"generated": "                                                                                 output sum,  output carry);  assign sum = a ^ b;  assign carry = a & b;endmodulemodule full_adder (  input a,  input b,  input cin,", "label": "  output sum,"}
{"generated": "output hs,hc;", "label": "output hs,hc;\r"}
{"generated": "       o_tdata<=0;        o_tvalid<=0;        o_tlast<=0;        end    else if (temp_valid && temp_ready)begin        o_tdata<=temp_data;       ", "label": "        o_tdata<=0;"}
{"generated": "6];\t\tout7 <= array[7];\t\tout8 <= array[8];  end  endmodule", "label": "\t\tout7 <= array[7];"}
{"generated": "\t\tq_next = (q_reset) ? 0 : (q_add) ? q_reg + 1 : q_reg;\r", "label": "\t\t\tDRAW = 4'd2,\r"}
{"generated": "module PWM_improved #(parameter n = 8)(", "label": "module PWM_improved #(parameter R = 8 , timer_bits = 15)("}
{"generated": "\r    output      wire  [1:0]                    o_JumpAddr_D,\r    output      wire                           o_Branch_D,\r    output      wire  [1:0]                    o_AluCtrl", "label": "    output      wire                           o_Branch_D,\r"}
{"generated": "                                                                                                                                                                                                            if (AXIS_TREADY) begin", "label": "                delay     <= 200000000;"}
{"generated": "RESP,    input                                   S_AXI_RREADY);", "label": "    input                                   S_AXI_RREADY,"}
{"generated": "wea;        // Timing related stuff    wire clk_vga;    reg clk_uart;    reg [2:0] counter;    wire locked;    reg reset;        // Generate 108MHz for V", "label": "    reg [7:0]buffer_r;"}
{"generated": "1;", "label": "    demux_1x2 dem(.y(y), .sel(sel),.d0(d0),.d1(d1));"}
{"generated": "comparator comp(combination, X, isCorrect);\rpulseCircuit pulseCircuit(Clock, enter_pulse, enter_pulse_reg);\rpulseCircuit pulseCircuit2(Clock,", "label": "pulseCircuit ePulse(Clock, Enter, enter_pulse);\r"}
{"generated": "       .rd_en_in(rd_en_tx2fifo_w),", "label": "      fifo_wr_en_ff <= 0;"}
{"generated": "\t\t`OPCODE_JALR     :     Imm = { IR[31], IR[30:20], IR[19:12], IR[11:8] };", "label": "module Four_One_mux_new #(parameter N= 32)(input [N-1:0] A, B, C, D, input [1:0] sel, output reg [N-1:0]  Y);"}
{"generated": "       if(rst_n == 0)", "label": "    if(rst_n == 0)"}
{"generated": "\t\tattempt2: if (Change == 1 & w == 0) Y = initial_stage;\r\t\t\t\t\t\t\t//else if (Change == 1 & w == 1) Y = change_com", "label": "\t\tattempt2: Y = attempt2;\r"}
{"generated": "assign out = sel ? in1 : in0;", "label": "assign out = sel? in1: in0;"}
{"generated": "/******/     ,.ulpi_data_out_o(ulpi_out_w)\r    ,.ulpi_stp_o(ulpi_stp_o)\r    ,.ulpi_nxt_i(", "label": "    ,.ulpi_nxt_i(ulpi_nxt_i)\r"}
{"generated": "output gnt_0, gnt_1;", "label": "output gnt_0, gnt_1;"}
{"generated": " end", "label": "   test_vals[23] = 12'h0_0_0;"}
{"generated": "   if(!rstn)begin", "label": "    #10 LED1_on = 1'b0;\r"}
{"generated": "decoder decoder({\\        .A(M[3:0]),        .HEX0(HEX0),        .HEX1(HEX1)\r    }\r\r    // Instantiate the 7-segment decoder", "label": "        .HEX0(HEX0)\r"}
{"generated": "8],inVector[(31-i)-:8]);\r\t\tif (i==0)\r\t\t\tgaloisMultiplyBy3 gm3(colx3[(31-i)-:8],inVector", "label": "\t\tgaloisMultiplyBy3 gm3(colx3[(31-i)-:8],inVector[(31-i)-:8]);\r"}
{"generated": "           block_ram  Block_Rom(//        .all_loaded(all_loaded),//        .graypixel(gray_out),//        .data_valid(one_byte_ready),//        .read_H(", "label": "        .sobel_out(out_sobel),"}
{"generated": "0] alu_result;", "label": "wire [XLEN-1 : 0] result_add, result_sll, result_slt, result_sltu;"}
{"generated": "1 #(.data_length(REGISTER_BANK_ADDRESS_LENGTH)) register_bank_write_address_mux(", "label": "\t\t.clock(clock),"}
{"generated": "ry_Adder.v", "label": "    wire [3:1] c;"}
{"generated": "   specparam      tplh$A$Y = 1.0,      tphl$A$Y = 1.0;    // path delays    (A *> Y) = (tplh$A$", "label": "buf I4(flgclk,dG);"}
{"generated": "//agreement, including, without limitation, that your use is for\r//the sole purpose of programming logic devices manufactured by\r//Intel and sold by Intel or its authorized distributors. Please\r//refer to the applicable agreement for further details", "label": "\toutput\t  c1;\r"}
{"generated": ";\r\t\tmDLY\t\t<=\t0;\r\t\tmLCD_Start\t<=\t0;\r\t\tmLCD_DATA\t<=\t0;\r\t\tmLCD_RS\t\t<=\t0;\r\t", "label": "\t\t\t\t\t\tmLCD_ST\t<=\t3;\r"}
{"generated": "", "label": "\tif (((EX_MEM_IR [31:26]== beqz)&& ( EX_MEM_cond == 1))||"}
{"generated": "0] plugboard13,\r    output reg [5:0] plugboard_backward)\r", "label": "\tplugboard16: out = plugboard17;\r"}
{"generated": ".S_AXI_WDATA(s00_axi_wdata),", "label": "    wire adc_conv_flag;"}
{"generated": "           .S_AXI_AWPROT(s_axi_awprot),        .S_AXI_AWVALID(s_axi_awvalid),        .S_AXI_AWREADY(s_", "label": "        .S_AXI_AWPROT(s_axi_awprot),"}
{"generated": "generator/all_stages/alu.py:123\" *)  wire \\$171 ;  (* src = \"/home/ubuntu/Chipcron-core-generator/all_stages/alu", "label": "    (* src = \"/home/ubuntu/Chipcron-core-generator/Wrapper_class.py:68\" *)"}
{"generated": ".PC_out(instructionTop)", "label": ".PC_out(instructionTop));"}
{"generated": "code \uc218\ud589\r            esti_bits_1[11] = temporarycode[16);\r            esti_bits_1[10:4] = temporarycode[14:8]; \r            esti_", "label": "            esti_bits_1[10:4] = temporarycode[14:8]; \r"}
{"generated": "                                                                                                                                                                                           r_SM_Main     <= IDLE;\r", "label": "            r_SM_Main     <= IDLE;\r"}
{"generated": "0]==BR_TYPE)begin        //NPC = EX_MEM_ALUOUT;        //EX_MEM_COND = 1'b0;        //BR_EN = 1'b1;        //EX", "label": "    ADD:EX_MEM_ALUOUT <= ID_EX_A + ID_EX_B;"}
{"generated": "`timescale 1ns / 1ps//////////////////////////////////////////////////////////////////////////////////// Company: // Engineer: // // Create Date: 2023/03/21", "label": "Interpolation_top  Interpolation_top_inst"}
{"generated": "       if (cpu_write) begin", "label": "        businterface_read = cpu_read;"}
{"generated": "endmodule", "label": "endmodule"}
{"generated": "   #20;    // End of testcase    #20;    // End of simulation    #20;    // End of simulation    #20;    // End of simulation    #20;    // End of", "label": "endmodule"}
{"generated": "                       temp_result = temp_reg2 >> 1;            OP_LOGIC_LEFT_ARITH:", "label": "                temp_result = { temp_reg2[0], 1'b0, temp_reg2[31:1] };"}
{"generated": "\t\tbegin", "label": "\t\t\tif(cnt_K3 == 2'd2 && cnt_K3_on ==1)"}
{"generated": "K, A, B, W, out);", "label": "\t\t\tir_val = 8'b0;\t"}
{"generated": "b00000000;                    ICW4_REG <= 8'b00000000;                    OCW2_REG <= 8'b000000", "label": "            ICW3: begin"}
{"generated": ";", "label": "\t\t\t\t\t\t\t\t\tRec_cnt<= 27'd0;"}
{"generated": "       $monitor(\"Time=%0t a_in=%0b b_in=%0b s=%0b c=%0b\",$time,a_in,b_in,s,c);", "label": "module demux_1x2("}
{"generated": ";", "label": "`define IINDEX `INDEX_SIZE+`IOFFSET_SIZE-1:`IOFFSET_SIZE"}
{"generated": "   input [7:0] addr_data,      // input wire [7 : 0] addr_data", "label": "    output [7:0] addr_data,"}
{"generated": "           .i_addr_write      (w_rd_addr),", "label": "        .i_addr             (w_alu_result),"}
{"generated": "0;\telse\trx_acc <= rx_acc + 1;\tif (tx_acc == TX_ACC_MAX[TX_ACC_WIDTH - 1:0])\t\ttx_acc <= 0;", "label": "always @(posedge clk_50m) begin"}
{"generated": "pure_2\t\t= SPLIT_wire & pure_symbol == 3'd2 & ~encoding_idle;", "label": "parameter WRITE\t\t\t= 4'b0000;"}
{"generated": "hd__decap_3 PHY_41 (); sky130_fd_sc_hd__decap_3 PHY_42 (); sky130_fd_sc_hd__decap_3 PHY", "label": " sky130_ef_sc_hd__decap_12 FILLER_0_21_125 ();"}
{"generated": "EX_MEM_COND) begin", "label": "  #300 $finish;"}
{"generated": "_component.port_phasedone = \"PORT_UNUSED\",\t\taltpll_component.port_phasestep = \"PORT_UNUSED\",\t\taltpll_component.port_phaseupdown = \"PORT_", "label": "\t\taltpll_component.port_extclk3 = \"PORT_UNUSED\","}
{"generated": "           #10 A = 0; #10 A = 1; #10 A = 0;", "label": "        {A, B, C, D} <= 0; "}
{"generated": "w) && (rs1_e != 0)) begin\r            forward_a_e = 2'b01;\r        end\r        else begin\r            forward_a_e = 2'b00;\r       ", "label": "    stal_f = lw_stall;\r"}
{"generated": "_write_space <= 8'h00;\r", "label": "\tSync_FIFO.overflow_checking\t\t\t= \"OFF\",\r"}
{"generated": "2'b01 : SEG_DATA = 8'b00000110;", "label": "\t\toutput [4:0] SEG_SEL;"}
{"generated": "ER_PROJECT_SIDEBAND_SUPPORT", "label": "        if(re) rdo <= RAM[raddr];"}
{"generated": "READ_PIN_2\t\t\t3'b011`define CHOOSE_CARD\t\t\t3'b100`define READ_CARD_2\t\t\t3'b101`", "label": "module authentication("}
{"generated": "ig_v;", "label": "initial h_count = 0;"}
{"generated": "1[0]), .CK(clk), .R(n1), .Q(reg_alu[0])         );  DFFRPQ_X2M_A9TR reg_c1_reg_7_ ( .", "label": "  DFFRPQ_X2M_A9TR reg_out_reg_9_ ( .D(mul[9]), .CK(clk), .R(n1), .Q(d[9]) );"}
{"generated": "       o_Branch_E=i_sign_E;\r    end \r    blt:\r    begin\r", "label": "        o_Branch_E=i_carry_E;\r"}
{"generated": "           Z[1] = 1'b1;        // If the MSB of the output is a one, then the number is a negative number        else            Z[1] = 1'b0;        end    end", "label": "            Z[1] = 1'b1;"}
{"generated": "&~(f0))\r\t\t\tgout=3'b000; //and\r\t\tif (f3 & f0)\r\t\t\tgout=3'b011; //nor\r\t\t", "label": "\t\tif (f2 & f1 & f3 & f0)\r"}
{"generated": "\tz_tb = $random;", "label": "\tz_tb = $random;"}
{"generated": "0) begin        $display(\"*-* All Finished *-*\");        $finish;    end    else begin        $display(\"*-* All Finished *-*\");        $finish;    endendendendmodule", "label": "initial begin"}
{"generated": "   initial begin\r", "label": "    integer i, j, k;\r"}
{"generated": "\t\t.divideby16(divideby16), \r\t\t.rst(rst)\r\t);\r\talways #10 clk=~clk;\r\tinitial begin\r\t\t// Initialize Inputs\r\t", "label": "\t\t.divideby16(divideby16),\r"}
{"generated": "[10] <= 0;\t\td[9] <= 0;\t\td[8] <= 0;\t\td[7] <= 0;\t\td[6] <= 0;\t\t", "label": "\t\td[9] <= (~D[29:20] + 1);"}
{"generated": "_write_space <= 8'h00;\r", "label": " *****************************************************************************/\r"}
{"generated": "alu.v\r", "label": "\t\tcase(control)\r"}
{"generated": " initial begin  //   $monitor(\"Time %0t: pc=%x npc=%x S=%b control=%b instruction=%b result=%b\", $time, pc_wire, npc_wire, S, control_", "label": "        $display(\"=========================================================================\","}
{"generated": "       lreg = continuous;", "label": "        lreg <= A & ~D | ~(C & D) | (A ^ B);"}
{"generated": "   case (in)", "label": "        for (out = 0; out < IN_SIZE && in[out] !== 1; out = out + 1) begin"}
{"generated": "00000; //          11'h041: data = 8'b00000000; //          11'h042: data = 8'b000", "label": "endmodule  "}
{"generated": "63:56] <= p_in[31:24]\r", "label": "\t\ttip <=1'b1;\r"}
{"generated": "always@(*)\r", "label": "\t\t\t\tif(rst_int_reg)\r"}
{"generated": "8];\t\t\tload_instr_reg = PPU_Control_Unit.control_output[4];\t\t\trf_enable_reg = PPU_Control_Unit.control_output[5];        end    end", "label": "\t\t\tmem_se_reg = 1'b0;"}
{"generated": "\t\t4'd7 : {a, b, c, d, e, f, g} = ~7'b0011111;\t\t4'd8 : {a, b, c, d", "label": "\t\t4'd7 : {a, b, c, d, e, f, g} = ~7'b1110000;"}
{"generated": "begin        ram_addr_w <= ram_addr_r;        ram_data_w <= maximum1;        ram_en <= 'd1;        ram_wea <= 'd1;    end        else if (ps", "label": "              end_MP2 <= end_MP2;end"}
{"generated": "                                                                                                                                                                                                                                                                                                                                                                                                 .ulpi_stp(ulpi_stp),    .ulpi_data(ulpi_data));", "label": "    .ulpi_stp(ulpi_stp),"}
{"generated": "00111_1010; next_rd = flip; end\r", "label": "\tinitial begin\r"}
{"generated": "       if (inc_bt_addr[mem_abit - 1 + 2: 10] != 'd0) begin            //wrapping transfer            //     inc_bt_addr = {inc_bt_addr", "label": "        if ((inc_bt_addr[addr_wrap_bloc] != bt_addr[addr_wrap_bloc]) && bt_wrap) begin"}
{"generated": " initial begin", "label": "  initial begin"}
{"generated": "                                                                                                                       .start_i(start_i)                                                                                   ,", "label": "        .start_i(start_i)                                                                                       ,"}
{"generated": "rom data\twire[15:0] acu_data;\twire[15:0] reg_data;\twire[15:0] io_data;\twire[15:0] acu_", "label": "\twire acu_zero;"}
{"generated": "      Cout <= Cout + 1;", "label": "Cout <= Cout+ 1;"}
{"generated": "                   addr <= i_addr;\r                wdata <= i_wdata;\r            end\r            else if (i_cache) begin\r                cen <= 1;\r                wen <= 0;\r                addr <=", "label": "                addr <= i_addr;\r"}
{"generated": ";", "label": "reg\t\t\tsw_on;"}
{"generated": "                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       .duty(duty),", "label": "    .duty(duty),"}
{"generated": "    assign GSR_int = GSR;", "label": "    wire JTAG_TRST_GLBL;"}
{"generated": "\t\tALUOp0\t\t= 1'b0;\t\t\t\tend\t\t\t7'b1100011: \t// UJ type Jal\t\t\t\tbegin\t\t\t", "label": "\t\t\t\t\tLui  \t\t= 1'b1;"}
{"generated": "inst (", "label": "    .SLAVE_ADRESS(SLAVE_ADRESS),"}
{"generated": "ABLE_HEX4`define ENABLE_HEX5`define ENABLE_HEX6`define ENABLE_HEX7`define ENABLE_LED0`define ENABLE_LED1`define ENABLE_LED2", "label": "\toutput\t\t     [1:0]\t\tDRAM_BA,"}
{"generated": "\t\tseg[15]= 7'h71;    //  F\t\tseg[16]= 7'h3d;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "label": "\tdivide #(.WIDTH(32),.N(1200000)) U1 ( "}
{"generated": "           .o_stall    (SMEM_stall)\r    );\r    \r    memory #(.SIZE(`SIZE_DATA), .OS(`OS)) IMEM \r        .i_clk      (clk)\r        .i", "label": "        .o_stall    (SMEM_stall),\r"}
{"generated": "]),.out(y[7]));mux2X1  ins_26 (.in0(x[6]),.in1(1'b0),.sel(ctrl[1]),.out(y[6]));mux", "label": "mux2X1  ins_25 (.in0(x[5]),.in1(x[7]),.sel(ctrl[1]),.out(y[5]));"}
{"generated": "\tr_cnt_val <= {P_COUNT_BIT{1'b0}};", "label": "\t\t\tr_cnt_val <= {P_COUNT_BIT{1'b0}};"}
{"generated": "\tassign wireCMP = (Instr[24:21] == 4'b1010) & Instr[20]; //Cambio\r", "label": "\tassign {neg, zero, carry, overflow} = Flags;\r"}
{"generated": "   inout B1 ;    inout O ;endmodule module AO222 ( B1 , B2 , C2 , A1 , C1 , A2 , O );    inout B1 ;    inout B", "label": "module AO222 ( A2 , C1 , A1 , C2 , B1 , B2 , O );"}
{"generated": "   else", "label": "add3 C13(T[38:35], Y[8:5]);"}
{"generated": "                                                                                 sub_data_valid = 0                                                                                 ;        #20        sub_data_valid = 1                                                                                      ;        sub_data = 32'h", "label": "        sub_data_valid = 0                                                                                      ;"}
{"generated": "_next;\r    // The bird's vertical position next cycle\r    always @(posedge clk or posedge reset) begin\r       if (reset) begin\r           bird_y <= 250;\r       end else begin\r", "label": "        end else if (skip == 0) begin\r"}
{"generated": "bit opcode", "label": "\tinput [14:12] func3;"}
{"generated": "==125 )  sda_out<=1'b0;     else if (i2c_cs==STOP2 && cnt_1bit==125 )  sda_out<=1'b0;    ", "label": "           else i2c_ns=ADDR1_B;"}
{"generated": "// reduce pessimism        endtableendprimitive`endif // NO_PRIMITIVES`default_nettype wire`endif  // SKY130_FD_SC_HD__UDP_DLATCH_P", "label": " * udp_mux_4to2: Four to one multiplexer with 2 select controls"}
{"generated": "\r    always @(posedge CLK or negedge RST)\r", "label": "    integer I ;\r"}
{"generated": "trol charactor", "label": "\t\tif (pb_in == 1'b1 && pb_in_delay == 1'b0) begin"}
{"generated": "H_FRONT_PORCH+H_SYNC_PULSE - 1))\t    h_sync_signal <= 1;    end    always @(posedge clk) begin        if(h_sync_counter", "label": "            h_sync_signal <= 1'b0;"}
{"generated": "\t\t\trptr_gray <= {(AddWidth+1){1'b0}};\t\t\t\t\t\t//clean all rptr_gray", "label": "\t\tif(datavalid)\r"}
{"generated": "\t\t\tdata_memory[9] <= 8'b0;\t\t\tdata_memory[10] <= 8'b0;\t\t\tdata_memory[11] <= 8'b0;", "label": "\t\t\tdata_memory[9] <= 8'b0;"}
{"generated": "[0] = Cin;\r\rassign C[1] = (A[0] & B[0]) | ((~A[0] & B[0]) & Cin);\r\rassign C[2] = (A[1]", "label": "assign C[3] = G[2] | (P[2]&G[1]) | (P[2]&P[1]&G[0]) | (P[2]&P[1]&P[0]&C[0]);\r"}
{"generated": "st    -1 :0] cpu_arburst;   wire [`Larqos      -1 :0] cpu_aqos;   wire [`Larvalid   -1 :0] cpu_avalid;  ", "label": "   wire [`Lbresp      -1 :0] cpu_bresp;"}
{"generated": "b1001)\r\t\t\t\t\tct <= 4'b0000;\r\t\t\t\telse \r\t\t\t\t\tct <= ct + 4'b0001;\r\t\t\t", "label": "assign xten  = (ct[3:0] == 4'b1001) ? 1'b1 : 1'b0;\r"}
{"generated": "end\tend\tSTATE_STOP: begin\t\tif (clken) begin\t\t\ttx <= 1'b1;\t\t\tstate <= STATE_IDLE;\t\tend\tend\tdefault: begin\t\t", "label": "\t\tif (clken) begin"}
{"generated": "\t\tend", "label": "  wire [31:0] counter;"}
{"generated": "//THIS IS ALU MODULE alu(\t\t\t\t\tinput \t[31:0]\top1,\t\tinput \t[31:0]\top2", "label": "\t\tinput\t[31:0]\twr_data"}
{"generated": "                                                                                                                                                                                                                 input  [DataMemory_WIDTH - 1 : 0]         Address ,", "label": "reg [DataMemory_WIDTH - 1 : 0] Data_mem [DataMemory_DEPTH - 1  : 0] ;"}
{"generated": "clk)din=j; endtask\rtask read; @(negedge clk)re=1'b1; endtask\rinitial begin\rinputs(8'd1); #10; inputs(8'd2", "label": "clk)din=j; endtask\r"}
{"generated": "                                                                                                                                                                                                                                                                                                                                                                                                                                                                         //        3'b100: data_out=8'b11101", "label": "        3'b100: data_out=8'b11101111;"}
{"generated": "@(*) begin", "label": "        4'b0101:out=a+b;"}
{"generated": "st_write: begin if(hreadyout == 0)next = st_wenable;else next = st_idle;end", "label": "st_write: begin"}
{"generated": "    reg [1:0] state;", "label": "    assign clk_out = sel ? clk2 : clk1;"}
{"generated": "'b0;\r\rend\r\rend\ralways @(posedge clk)\r\rbegin\rif(!rst)\r\rlow_pkt_valid <=1'b0;\r\relse \r\rbegin\rif (ld_state && !", "label": "parity_done <= 1'b0;\r"}
{"generated": "\t\tend\r", "label": "\talways @(posedge clk) begin\r"}
{"generated": ".rst(rst), .in(in_1), .out(out_1)\r);\rBx_B_single row_2 (\r    .clk(clk), .rst(rst), .in(", "label": "Bx_B_single row_2 (\r"}
{"generated": "byte3,byte4);\rend\rendfunction\rfunction [7:0]subByteReg;\rinput [7:0]inputByte;\rbegin\r\tcase (inputByte)\r\t\t8'h00: subByteReg =", "label": "        8'h01 : subByteReg = 8'h7c;\r"}
{"generated": "wire [10:0] lut_", "label": "parameter const0_68889 = 9'b0_10110000;"}
{"generated": "       mem[8] = 32'd8;    mem[9] = 32'd9;    mem[10] = 32'd10;    mem[11] = 3", "label": "    mem[8] = 32'd8;"}
{"generated": "module full_adder (", "label": "module full_adder("}
{"generated": "0;          clk_div<=1'b0;        end      else        begin          if(clk_cnt==3'd7)          begin            clk_cnt<=3'd0;            clk_div<=~clk_", "label": "          clk_cnt<=3'd0;"}
{"generated": "   )", "label": "       input [n-1:0] x,y,"}
{"generated": "   assign ASHI_RDATA = (R_HANDSHAKE) ? AXI_RDATA : 32'hzzzzzzzz;    // The two response signals are always whatever the handler says they are", "label": "    assign AXI_BRESP = ASHI_WRESP;"}
{"generated": "\u6210\u529f", "label": "    if(!rst_n) begin"}
{"generated": "\tx1 <= ~x1;\r\tx2 <= ~x2;\r\tx3 <= ~x3;\r\tx4 <= ~x4;\r\t#10;\r\tend\rendmodule\r", "label": "        x3 <= x3 + 3;\r"}
{"generated": "   input [n-1:0] duty,", "label": "    input [n-1 :0 ] duty,"}
{"generated": "                                                                                SEND_ADDR2 = 5'h06,                     SEND_ADDR1 = 5'h07,                     SEND_ADDR0 = 5'h08,                    ", "label": "\t\t\t\t\t SEND_ADDR2 = 5'h06,"}
{"generated": "                                                                                                                                                                                                                                                                                                                                                                       array[c] = array[position];", "label": "         array[c] = array[position];"}
{"generated": "       #5 clk = ~clk;    end", "label": "        #5 clk = ~clk;"}
{"generated": "0; i < 8; i = i + 1) begin: Compare_Loop ", "label": "    always@(posedge Trigger)"}
{"generated": "/ControlUnit.v", "label": "    output [1:0] ALUControl,\t"}
{"generated": "ER_PROJECT_SIDEBAND_SUPPORT", "label": "  output wire                        arready,"}
{"generated": "G_BITS-1:0] song,    output [`NOTE_KEY_BITS-1:0] led,    output buzzer);", "label": "wire [`NOTE_BITS-1:0] note;"}
{"generated": "begin     rd_ptr <= 5'b00000;   end else if (rd) begin     rd_ptr <= rd_ptr + 1;   end end always @ (posedge wr_clk", "label": "      rd_ptr <= rd_ptr + 1;"}
{"generated": "always @ (posedge w_clk,w_rst)\r", "label": "    always @( posedge r_clk,r_rst )\r"}
{"generated": "=1'b0; addr=3'b0; #10; addr=3'b1; #10; addr=3'b10; #10; addr=3'b11; #1", "label": "endtask task read; begin re=1'b1; we=1'b0;"}
{"generated": "    reg [3:0] state;", "label": "    localparam N = 3;"}
{"generated": "// end", "label": "module led_top("}
{"generated": "s(s0), .co(co0));", "label": "\t\t#10; a0 = 0; b0 = 0; ci0 = 1;"}
{"generated": "       if (health == 0) begin", "label": "    player_x = 200;"}
{"generated": "1'b0;\r            dcache_refresh <= 1'b0;\r            uncache_refresh <= 1'b0;\r            icache_rdata_buffer <= 32'b0;\r            icache_w", "label": "                        arlen <= 4'hf;\r"}
{"generated": "_a_cube(\t.clk \t(clk),\t.num1\t(a_cube),\t.num2\t(x_val_old_2),\t.res \t(y_mult_a", "label": "\t.num1\t(a_cube),"}
{"generated": "always @(posedge i_clk or negedge i_fRST) \r    begin\r        if (~i_fRST)\r            spi_clk_width_cnt <= 0;\r\r        else if ((state ==", "label": "                            mosi_reg <= mosi_reg;\r"}
{"generated": "                                                                                                                                                                                                    end", "label": "     round_key[i]= key_register[0:63];"}
{"generated": "                   input [31:0] bellek_oku_veri,    output reg [31:0] bellek_yaz_veri,    output reg bellek_yaz,    output reg", "label": "    output [31:0] program_sayaci,"}
{"generated": "full <= `BSV_ASSIGNMENT_DELAY 1'b0;               end               // -----------------------               // ENQ only and NO data is in ring               5'b100?1: begin                 ", "label": "        reg deqerror, enqerror ;"}
{"generated": "       .sram_wdata (sram_wdata   ),\r", "label": "        .hit        (hit             ),\r"}
{"generated": "[3:0] SysCtrl_SS_AXI_to_AXI_AR_QOS;    wire [2:0] SysCtrl_SS_AXI_to_AXI_AR_REGION;   ", "label": "    assign SysCtrl_SS_Reset_SS_2_to_bus_1_reset = SysCtrl_SS_reset_ss_2;"}
{"generated": "E88408B251B89C0E498E8A88B89B005F4E3D3B88A7B87885F3", "label": "localparam G6_1 = 512'h975CED50A31C625C28A5DCB0806EA8B42655F38F9F3CC859D83F0DB9670A51B20C3DBCAF1BD42C03D303B43FA30534AEAB5FB9A591B34E6C758D881429F63BD9;"}
{"generated": ",WR;", "label": "\treg [15:0] search_count = 16'b0;"}
{"generated": "                   end", "label": "                    if (!debounced_switch_song) begin"}
{"generated": "<= 0;                  //\u521d\u59cb\u5316\u65f6\u7ed9cnt\u8d4b\u503c0                 else if (key_edge) cnt <= 0;                  //\u68c0\u6d4b\u5230\u6309\u952e\u52a8\u4f5c\u65f6\u6e05\u96f6\u8ba1\u6570\u5668                 else cnt <= cnt", "label": "                cnt <= cnt + 1'h1;"}
{"generated": "_wren),    .user_w_mem_8_full(user_w_mem_8_full),    .user_w_mem_8_data(user_w_mem_8_data),    .", "label": "   always @(posedge bus_clk)"}
{"generated": "#5    En=0; S[2:0]=3'b100; D[7:0]=8'b00010000;    #5    En=0; S[2:", "label": "    En=0; S[2:0]=3'b101; D[7:0]=8'b00100000;"}
{"generated": "0;\r", "label": "assign\tLCD_DATA\t=\tiDATA; \r"}
{"generated": "w;\rassign regwrite = rformat;\rassign memread = lw;\rassign memwrite = sw;\rassign branch = j|beq|bne;\rassign branchNotEqual = ~(beq|bne);\rassign aluop", "label": "assign memwrite = sw;\r"}
{"generated": "                                                                                                                                                                                                                                                                                                                                                                                                                   .Load          (load),", "label": "    .Load          (load),"}
{"generated": "       always @(posedge wb_clk, posedge wb_rst) begin", "label": "        always@(posedge wb_clk, posedge wb_rst) begin"}
{"generated": ")", "label": "    input reset_n,"}
{"generated": "\r\t3'b100: alu_out = a - b;\r\t3'b101: alu_out = a ^ b;\r\t3'b110: alu_out = a <<", "label": "\t3'b111: begin less = a+1+(~b);\r"}
{"generated": "                                                                                                                               start_i = 1                                                                                             ;                #1000000000        $finish                                                                                         ;    end    end", "label": "        start_i = 1                                                                                             ;"}
{"generated": "^ poly[1]\r            end\r            p = p - 4;\r        end\r    end\r    always @(posedge clk) begin\r        CRC4_code <= temp_data[13:10];\r       ", "label": "        CRC4_code[2] = temp_data[2];\r"}
{"generated": "initial begin", "label": "always @(opcode,r1,r2) begin"}
{"generated": "\t.res\t(result2));", "label": "\t.res\t(result2)"}
{"generated": "end        else begin            flag[0] = 0;        end    end    else if(ALUControl==2'b01)begin        result = Src_A - Src_B;        if(result[", "label": "            flag[2] = 1;"}
{"generated": "input  [simd*bw-1:0] in8;  input  [simd*bw-1:0] in9;  input  [simd*bw-1:0] in10;  input", "label": "  input  [simd*bw-1:0] in11;"}
{"generated": "[1]);  xor(sout[3], p3, c[2]);  assign c[0] = g0 | (p0 & Cin);  assign c[1] = g1 | (p1 & c", "label": "  assign c[0] = g0 | (p0 & Cin);"}
{"generated": "   else begin    if(read_available_M) begin    data_out_M<=data_tmp_M;    end    end    end", "label": "    else if(read_available_M==1) "}
{"generated": "M-1:0][MAX_DIM-1:0];      reg [DATA_WIDTH-1:0] mat_B_2d [MAX_DIM-1:0][MAX_DIM-1:0", "label": "        forever #(CLK_PERIOD/2) clk = ~clk;"}
{"generated": "//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprog_cnt;wire\t[31:0]\tinstr;wire\t[31:0]\top1;wire\t", "label": "\t.clk\t\t\t(clk\t\t),"}
{"generated": "    assign oHS = 1'b0;", "label": "  output wire visible, "}
{"generated": "000;\r\r// TRANSFORM MULTIPLICATION OUT\rdelay32b r1_xw_delay (\r    .clk(clk),\r    .rst(rst)\r    , .in(r", "label": "    .in_2(y_tf_out_2),\r"}
{"generated": "(posedge encrypt_buf or posedge crypt_mode_buf) begin\r", "label": "        rotorB_nxt17 =  rotorB17;\r"}
{"generated": "//==============================================================\r//======Frame Generate\rreg [31:0] pts_d0;\rreg [31:0] pts_d1;\rwire pts_rise;\ralways @(posedge", "label": "reg [10:0] sofCounts;\r"}
{"generated": "   case(cur_state)", "label": "    case(cur_state)"}
{"generated": "#(period/2) clk = ~clk; end initial begin ", "label": " #(period/2) clk = ~clk;"}
{"generated": "SIZE-1:0]] : ActualBranchTarget;\r", "label": "\tassign out = 1'b0;\r"}
{"generated": "\t\tnext_prbs31[ 1] = in[ 0] ^ (in[28] ^ in[25]);", "label": "\t\tnext_prbs31[ 1] = in[ 0] ^ (in[28] ^ in[25]);"}
{"generated": "   reg[2:0] state1;", "label": "    reg [2:0] state1 = player1S0;"}
{"generated": "32{EN}} & RAM[r_A>>2];    // read    wire [11:0] WA = A;    always @(posedge CLK) begin        if(EN) begin            if(WE[", "label": "            if(WE[2]) RAM[A>>2][23:16] <= Di[23:16];"}
{"generated": "           clk = 0;\r        reset = 1;\r        up_down = 0;\r        #10 reset = 0;\r        #10 up_down = 1;\r        #10 up_down = 0", "label": "        $monitor(\"M= %b Time=%0t, Counter=%b\", up_down, $time, counter);\r"}
{"generated": "100000000 \t// clock frequency in Hz\r    \tparameter   DIV = 115200  // baud rate in Hz\r    \tparameter   CLK = ", "label": "        \tcounter <= 0;\r"}
{"generated": "       .i_adc_spi_start(adc_spi_start),", "label": "            ram[addr1] <= din1;"}
{"generated": ";always @(posedge clk_i) begin    if (rst_i) begin        reservation <= 0;        reservation_addr <= 0;        addr_h_match <= 0;        addr_l", "label": "    for (i = 0 ; i < N ; i = i + 1) begin"}
{"generated": "\t 32'h00000001 === u_top.u_cpu.cpu.exu.registers.regs[5])\t\t begin\t\t\t $display(\"PASS\\n\");\t\t", "label": "\t                 $display(\"*      *        * * * *       *       *          *\");"}
{"generated": "       flow_cnt <= 2'b00;", "label": "        flow_cnt   <= 2'b0;"}
{"generated": "_op.v", "label": "    input wire clk_i, "}
{"generated": "D,t1,C);", "label": "\t #20 X=70000;"}
{"generated": "74121 (", "label": "    .B                       ( B   ),"}
{"generated": "bps;2'b10 : baud_rx_out = baud_tick_19200bps;2'b11 : baud_rx_out = baud_tick_960", "label": "2'b10 : baud_rx_out = baud_tick_19200bps;"}
{"generated": "=MEM[NPC];end else beginNPC<=NPC+32'd1;IF_ID<=MEM[NPC];IF_ID_NPC<=NPC+32'd1;endend*/end", "label": "SH_TYPE:begin"}
{"generated": "),\r\t.code_in_2(code_in_2),\r\t.code_in_3(code_in_3),\r    .rotorB0(rotorB[0]),\r    .rotor", "label": "    .rotorB14(rotorB[14]),\r"}
{"generated": "Assignments\r\t\t\telse \t\t\tData[2:0] <= Data[2:0] + 3'b001; //Blocking Assignments\r\t\tend\r\tassign Output = Data", "label": "\tinput Select;\r"}
{"generated": "Combinational Logic to read inputs -----------function [SIZE-1:0] fsm_function;", "label": "  input  [SIZE-1:0] state;"}
{"generated": "                 output wire [31:0] op1,op2,", "label": "xnor(btnr_XNOR_btnc,btnr,btnc);"}
{"generated": "(clk_IBUF_BUFG),        .CE(1'b1),        .D(\\output_multi_reg_n_0_[6] ),        .Q(Q[6]),        .R(led_output", "label": "       (.C(clk_IBUF_BUFG),"}
{"generated": "assign #20 cin = (select==1'b0) ? 1'b0 : 1'b1;", "label": " assign cin  =(select==1'b0) ? 1'b0 : 1'b1;"}
{"generated": "", "label": "                    end else if(alu1_i[31] == 1'b1 && alu2_i == -32'h1) begin "}
{"generated": "x = 1; y = 0; cin = 0;#10x = 1; y = 0; cin = 1;#10x = 1; y = 1; cin = 0", "label": "x = 1; y = 0; cin = 0;"}
{"generated": "                    // \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd", "label": "                    serialSignalCount_ctr <= serialSignalCount_ctr + 1;"}
{"generated": "reg [3:0] opcode;", "label": "localparam LW   = 4'd7;"}
{"generated": "       repeat(divider_value)         @(posedge wb_clk_in);        cpol_0 = 1'b0;", "label": "        @(posedge wb_clk_in)"}
{"generated": ", sout, c);                A = 4'b1111;        B = 4'b0000;        select = 1'b0;        #10;        $display(\"a=", "label": "        B = 4'b1111;"}
{"generated": "npc_reg <= 32'b0;            instruction_reg <= 32'b0;            alu_op_reg <= 3'b0;            mem_result <= 32'b0;", "label": "            if (le_pc && le_npc) pc_reg <= npc_reg;"}
{"generated": "\t\t.res(sub_res_im_1));mult mult_img2(\t.clk(clk),\t\t.num1(im1),\t.num2(re2),\t\t.res(sub_res", "label": "\t.num1(re2),"}
{"generated": "w  = reg_r17_q;\r    assign x18_s2_w  = reg_r18_q;\r    assign x19_s3_w  = reg_r19_q", "label": "        5'd10: ra0_value_r = reg_r10_q;\r"}
{"generated": "e", "label": "\t\t\trepeat (1000) @(posedge clock);"}
{"generated": "alucontrol <= 4'b0000;\r      endcase\r    end\r  end\r", "label": "endmodule"}
{"generated": "   input [`DATA_LEN-1:0] i_op1,", "label": "    input [`DATA_LEN-1:0] i_op1,"}
{"generated": "cache via write buffer\r\t\t\t\ten_read_RAM <= 0;          \t // don't read from RAM\r\t\t\t\tset_valid <= 0;  set_dirty <= 0;  set", "label": "\t\t\t\t\tset_valid <= 0;\r"}
{"generated": "\tns_ps2_transmitter = PS2_STATE_3_TRANSMIT_DATA;\r", "label": "reg\t\t\t[2:0]\ts_ps2_receiver;\r"}
{"generated": "                 .c_out(c_out));", "label": "    wire sum, carry;"}
{"generated": ": 0] spo  ); ", "label": " con_process con_process_inst("}
{"generated": "U out    assign tmp = {1'b0,A} + {1'b0,B};    assign CarryOut = tmp[16]; // Carryout flag    always @(*)    begin        case(AL", "label": "    assign tmp = {1'b0,A} + {1'b0,B};"}
{"generated": "mDLY+1'b1;\t\t\t\t\tmLCD_ST\t\t<=\t3;\t\t\t\tend\t\t\t3:\tbegin\t\t\t\t\tif(mDLY==18", "label": "\tLCD_LINE1+4:\tLUT_DATA\t<=\t9'h172;"}
{"generated": ",fc,a,b,c);\r", "label": "wire y1,y2,G1,G2;\r"}
{"generated": "is used to generate the diffrent combinations of inputs A and B\r   begin\r    {A,B}=i;\r    #10;\r   end\r end\r \r initial #50 $finish;\r \r", "label": " initial #50 $finish;\r"}
{"generated": ", n$13, n$14, n$15, n$16, n$17, n$18, n$19, n$20, n$21;  _HDFF", "label": "  and U$1(Z, A2, A1);"}
{"generated": "the up flag    load_tb = 1'b0;    up_tb = 1'b1;    #10    if (counter_tb == 5'b01011)      $display (\"", "label": "    if (counter_tb == 5'b01110) "}
{"generated": "               case(digit)", "label": "            led7_an_o <= ~(1 << digit);"}
{"generatedout = in1^in2;", "label": "              out = in1^in2;"}
{"generated": "1;\rwire [ 7 : 0] data_G1;\rwire [ 7 : 0] data_B1;\rwire ctrl_done;\r", "label": "    .HRESETn\t            (HRESETn ),\r"}
{"generated": "1    0   :  ?  :  0    ; // asynchronous reset", "label": "    #100 $finish;"}
{"generated": "        clkout <= ~clkout;", "label": "        counterclkout <= 2'b00;"}
{"generated": "   output reg [DW-1:0] rdata);", "label": " output [DW-1:0] rdata"}
{"generated": "", "label": "\t\t\t\t2'b01 : SEG_DATA = 8'b00000110;\r"}
{"generated": " Comparator10 comparator800_inst (    .input_value(Hcount),    .loaded_value(10'b0000111111), // HSync start value    .", "label": "  Comparator11 comparator800_inst ("}
{"generated": "2'd0;    parameter PLAYING = 2'd1;    parameter GRADE = 2'd2;    reg [1:0] state;    reg [1:0] next_state;", "label": "    parameter PLAY = `PLAY;"}
{"generated": "_COND) begin", "label": "clk = 1'b1;"}
{"generated": "                    case(buyruk[5:0])", "label": "assign oku_veri = oku_veri_cmb;"}
{"generated": "                                                                                                                                                                                                                                                                                                                                                                                                                   output [n-1:0] s,", "label": "   output [n-1:0] s,"}
{"generated": "e", "label": "\t\t.flash_csb(flash_csb),"}
{"generated": "       DUT.alu_result, DUT.imm_extended, DUT.write_data, DUT.PCSrc, DUT.setAddress, DUT.MemReadData);\r\r", "label": "    DUT.alu_result, DUT.imm_extended,\r"}
{"generated": ",        JMP_SIG    );   Vr_IMM_GEN Inst_GEN     (        Inst,        Imm_Exten    );   Vr_ALU ALU_Unit     (        RD1,        REG", "label": "        C_PC                   , "}
{"generated": "00111_1010; next_rd = flip; end\r", "label": "\tparameter state_rd_positive = 1'b1;\r"}
{"generated": "for*/", "label": "  #5 RN = 1'b0;"}
{"generated": "     r_x_t_1 <= x_i;", "label": "      r_x_t_2_temp  <= r_x_t_2;"}
{"generated": ")\r", "label": ") mem[i]=0;\r"}
{"generated": "wr_en = 0;", "label": "always #5 clk = ~clk;"}
{"generated": "   reg [`TAG_WIDTH-1:0] tag_way2 [`INDEX_WIDTH-1:0]; \r    reg [`TAG_WIDTH-1:0] tag_way3 [`INDEX_WIDTH-1:0]; \r", "label": "    reg [`INDEX_WIDTH-1:0] lru_r;\r"}
{"generated": "4:21]),\r", "label": "\tinput wire clk;\r"}
{"generated": "wire n1,n2,n3;", "label": "    assign F = A&B;"}
{"generated": "    always @(posedge i_clk) begin", "label": "    assign newcrc[25] = d[3] ^ d[2] ^ c[17] ^ c[26] ^ c[27];"}
{"generated": "1 (5:0) \r   input [4:0] rs2,\t\t// register source 2 (5:0) \r   input [4:0] rt,\t\t// register target (5:0) \r", "label": "\t\trv1 <= registers[rs1];\r"}
{"generated": "reg [1:0] dir;", "label": "\twire [4:0] apple_y;"}
{"generated": "   //    #2 x_i = 0;    #2 x_i = 0;    #2 x_i = 0;    #2 x_i = 1;    #2 x_i = ", "label": "    #2 x_i = 1;"}
{"generated": "           #10 A = 1; B = 0; Cin = 0;        #10 A = 1; B = 0; Cin = 1;        #10 A = 1; B = ", "label": "        #10 A = 1; B = 0; Cin = 0;"}
{"generated": "       .data(Data1_ID),        .extended(Imm_Ext_ID)    );    wire [31:0] ALU_Result_ID;    alu alu(        .op(ALU", "label": "    wire RegWrite_EX, RegDst_EX, MemRead_EX, MemWrite_EX, MemtoReg_EX, ALUSrc1_EX, ALUSrc2_EX;"}
{"generated": "            else", "label": "                    default:  byte_accessL = {{16{data_inL[31]}},data_inL[31:16]};                                                                                                                                                                                                                                                                                                                                                         "}
{"generated": "                                                                       else if (action2 == await) begin                            wait_count = wait_count + 2'b01;                            if (wait_count == 2'b10 && health != 2", "label": "                    else if(((action2 == await || action2 == left1 || action2 == left2 || action2 == punch)&&"}
{"generated": "A_BUS_IN(bus),.A_BUS_OUT(ACC_OUT),.Zero(Z_flag));\t\t\tALU_Processor ALU(.A(bus),.B(ACC_OUT),.Al", "label": "\ttribuf_8bit AluBuf(.in(alu_Out), .out(bus), .low_enable(aluOut_en));\r"}
{"generated": "= 0;\rreg [17:0] Buffer1=0, Buffer2=0, Buffer3=0, Buffer4=0;\rreg [3:0] temp;\rreg control =0, write=0, startready", "label": "\t\t\t\tgreen <= 3'b000;\r"}
{"generated": "out);", "label": "\txor(t1,A,B);"}
{"generated": ":begin        alu_out_comb = A^B;        logic_flag = 1'b1;      end      4'b1001:begin        alu_out_comb = A<<1;       ", "label": "        logic_flag = 1'b1;"}
{"generated": "//        ", "label": "    $readmemh(\"background.mem\", RAM);"}
{"generated": "                               full_s <= 1'b0;", "label": "                ram[rd_pos] <= 'b0;"}
{"generated": "                                RegDst , output  reg                                 RegWrite , output  reg                                 Jump , output  reg                                 Branch , output  reg                                 ALUOp ", "label": "  always @(*)"}
{"generated": ": begin", "label": "    second_divider sd(.clk(clk), .div_hsec(div_hsec));"}
{"generated": "testado\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "label": "\tinitial begin"}
{"generated": ".hex\", mem1); \rend \rendm\r", "label": "assign RD = mem1[address];\r"}
{"generated": "st_int_reg(rst_int_reg))\r\t\t\t\t.datain(datain))\r\t\t\t\t.err(err);\r\t\t\t\t.parity_done(parity_done);\r\t\t", "label": "\t\t\t\t\tpayload_data={$random}%256;\r"}
{"generated": "OR         16'd3`define R_MAX           16'd4`define R_MIN           16'd5`define R_SPEED         16'd6`define R_ACCEL         1", "label": "`define C_RESET         16'd20"}
{"generated": "\t\tRegWrite\t= 1'b0;", "label": "\tinitial begin "}
{"generated": ")begin    if(!rstn)begin        buzzer <= 1'b0;    end    else begin        if(min_deca_bcd_r == 4'h5)begin            buzzer", "label": "    if(!rstn) begin "}
{"generated": "baseline_parallel, data_out_baseline_reduced;\r\twire [23:0] data_out_direct, data_out_parallel, data_out_reduced;\r\twire [23:0]", "label": "\t\t.en(en), .reset(reset),\r"}
{"generated": "       rd<=out_rd;", "label": "        rd<=out_rd;"}
{"generated": "\r    end else if (x >= xmax) begin\r      f = xmax; // Pendenza costante dopo xmax\r    end else begin\r      f = $signed($pow(x, 7)) / $pow", "label": "    end else if (x >= xmax) begin\r"}
{"generated": "endmodule", "label": "    .thread T_0;"}
{"generated": "\uff080\uff09=1\uff0c\u8f93\u51faclk_p&clk_n                                                                    //clk_p\u4e0eclk_n\u7684\u4e0e\u8fd0\u7b97\u7ed3\u679c\u4e3a0\u65f6\uff0c\u8f93\u51fa0\uff0c\u5426\u5219\u8f93\u51fa1                                                ", "label": "endmodule "}
{"generated": " reg [ADDR_WIDTH-1:0] addr;  wire [DATA_WIDTH-1:0] data;  wire [DATA_WIDTH-1:0] mem [DEPTH-1:0];  integer i", "label": "  wire [DATA_WIDTH-1:0] data;"}
{"generated": "10;  wire n211;  wire n212;  wire n213;  reg [31:0] o_denominator;  reg [31:0] o_numerator", "label": "    .C(i_denominator[11]),"}
{"generated": "write(fw5, \"\\n\")\r\t\tend\r\t\t$fwrite(fw4,\"%d\",mem_dct2_exp[i*(64/8)*bmp_width0+j*(64/", "label": "\ty6i = (a*x0 -d*x1 +f*x2 +g*x3 -a*x4 +b*x5 -c*x6 +e*x7)/1024;\r"}
{"generated": "", "label": "                    m2reg = 1'b0;"}
{"generated": "RegWriteM, MemWriteM, MemToRegM;\r    wire [3:0] ALUControlM;\r    wire ALUSrcM, FlagWriteM, CondM;\r\twire [1:0] ImmSrcM;\r", "label": "\t\t.ALUControl(ALUControlE),\r"}
{"generated": "", "label": "        STA_WRITING        \t: begin\r"}
{"generated": "`.ARAU(", "label": "        .radar_echo(radar_echo),"}
{"generated": "                   axi_bvalid <= 1'b0;                end            end                   // work error responses in future            end                   // work error responses in future            end                   // work error responses in future            end   ", "label": "                    axi_bvalid <= 1'b0; "}
{"generated": "VLSI Design - 16-bit RISC Processor.srcs/sim_1/new/16-bit RISC Processor Testbench.v\"", "label": "   #5 clk = ~clk;"}
{"generated": "       #CLK_CYCLE        flick = 0;", "label": "\t#CLK_CYCLE        flick = 0;"}
{"generated": "   // with the index register R0:    ADD R0, R0, #4   // watch the content of R0!    STR R1, [R0]    // Store the content of R2 to the next location:", "label": "    STR R1, [R0, #4]!"}
{"generated": "the end of the reset sequence", "label": "always @(posedge clk)"}
{"generated": "   output[31:0]                            AXI_WSTRB,      output reg                                              AXI_WREADY,    // \"Send Write Response\"                -- Master --    -- Slave --   ", "label": "    input[3:0]                              AXI_WSTRB,"}
{"generated": "0;    act_cmd_d5 <= 1'b0;    act_cmd_d6 <= 1'b0;    act_cmd_d7 <= 1'b0;    act_cmd_d", "label": "  else if (addr_cam_search_en)begin"}
{"generated": "= inp1 & inp2;\r            D: out = inp1 | inp2;\r            E: out = inp1 ^ inp2;\r            F: out = ~inp1;\r            G: out =", "label": "                if( inp1[31] == inp2[31]) signbit = (inp2 > inp1) ? 0 : 1;\r"}
{"generated": "wire[31:0]  ashi_wdata_scratch;", "label": "reg[31:0] scratch;"}
{"generated": "always@(posedge clock)if(count2<172)count2<=count2+1;elsecount2<=1;assign baud_tick_38400bps =(count2<87", "label": "if(count2<260)"}
{"generated": "01: con_word = 12'h300; // State 1            6'b000010: con_word = 12'h310; // State 2            6", "label": "\t\t\t\t\tcon_word = 12'h1A3;"}
{"generated": "_IN;  wire stageReg_13_stsum$EN;  // register stageReg_13_valid  reg stageReg_13_valid;  wire stageReg_13_valid$D_IN,", "label": "  assign stageReg_12_stsum$D_IN ="}
{"generated": "   endianian", "label": "    end else begin"}
{"generated": "_start ;  assign WILL_FIRE_RL_rule_tb_2 = dut$EN_start ;  // rule RL_rule_tb_1  assign CAN_FIRE_RL_rule_tb_1", "label": "\ty <= `BSV_ASSIGNMENT_DELAY 16'd1;"}
{"generated": "       right_shift = 1;    end else if (o_ram_rd_mask[2:1] == 2'b10) begin", "label": "        right_shift = 8;"}
{"generated": " :  1    ; // reduce pessimism        endtableendprimitive`endif // NO_PRIMITIVES`default_nettype wire`endif  // SKY130_FD_SC_HD__UD", "label": "         1   ?   0  :  1   ;"}
{"generated": "   num = 16; #1 $display(\"Source number = %d; MSb = %d\", num, msb);", "label": "    num = 5; #1 $display(\"Source number = %d; MSb = %d\", num, msb);"}
{"generated": "G17,Y18,Y14,Y15,1'b0);\rPG n10(G18,G19,Y16,Y12,Y13,1'b0", "label": "PG n10(G15,Y12,Y13,a,b,1'b0);\r"}
{"generated": "    Half_Adder ha1(a,b,s1,c1);", "label": "    Half_Adder HA1(a,b,s1,c1);"}
{"generated": "control <= 3'b110;", "label": "        control <= 3'b101;\r"}
{"generated": ",w,x,y);\r", "label": "assign t = q;"}
{"generated": "       a = 0;b = 0;cin = 1;        #100;\r", "label": "\ta = 0;b = 0;cin = 1;\r"}
{"generated": "(32 - $clog2(a)) & a;\r  assign sra_aux = a ^ (32'b1111_1111_1111_1111 << (3", "label": "  assign product = a * b;\r"}
{"generated": "       next_a = reg_a;", "label": "        next_a = reg_a;"}
{"generated": "_rxd = 1;    #104170;    $stop;enduart_rx #(115200, 6, 1, 2) dut (clk, rst, u", "label": "    uart_rxd = 1;"}
{"generated": "       Memory[k] = k;", "label": "    Memory[k] = 32'h00000000;"}
{"generated": "; next_rd = flip; end\r\t\t\t10'b011_00010_0_0: begin code = 10'b101101_0011;", "label": "\t\t\t10'b001_10110_0_0: begin code = 10'b011010_1001; next_rd = same; end\r"}
{"generated": "TA", "label": "   reg [DATA_WIDTH-1:0]           RAM[0:MEMSIZE-1] /* synthesis syn_ramstyle=\"no_rw_check\" */ ;"}
{"generated": "output [31:0]PC_sel_o,output [31:0]alu1_i,output [31:0]alu2_i,output [31:0]imm_i,output [", "label": "output [3:0]read_write_o,"}
{"generated": "\t\t2'd3: out <= in1*in2;\r\t\tdefault: out <= 0;\r\tendcase\rend\rendmodule ", "label": "\t\t2'd3: out <= pr1*pr2;\r"}
{"generated": "   input [4:0] rd,input [31:0] writedata,output reg [31:0] read_data1,output reg [31:0] read_data2);", "label": "input [11:7] rd,"}
{"generated": "\tin_frame <= 0;\t\tend else begin\t\t\tcase (state)\t\t\t\t3'b000: begin\t\t\t\t\tif (data_enable) begin\t\t\t\t\t\t", "label": "\t\t\t\t\t\tif (data_enable) begin"}
{"generated": "Parameter\r//-----------------------------------------------------------------------------------\rparameter       TCQ                             = 1                     ;\r\r//---------------------------------------------------------------------------------------\r//              Port Define\r//----------------------------------------------------------------\rinput   wire                                    Cl", "label": "always @(posedge Clk) begin\r"}
{"generated": "_WBYTS);wire[ 7:0] burst_remainder = (burst_bytes % DATA_WBYTS);wire[ 7:0] burst_cycles_minus_one = burst_cycles", "label": "        ashi_rresp <= OKAY;              "}
{"generated": "],sffd[1],sffd[0]})\r        3'b000: segmentos=7'b0000001;\r        3'b001: segmentos=7'", "label": "        3'b000: segmentos=7'b0000001;\r"}
{"generated": "   player_x = 80;", "label": "    player_x = 80;"}
{"generated": "(bor));    or o_1(bor,w2,bor);endmodule", "label": "    or or_1(bor,w2,w3);"}
{"generated": "ALUctl)            2'b00: ALUOut <= A + B;            2'b01: ALUOut <= A - B;            2'b10: ALUOut <= A & B;            ", "label": "                ALUOut <= A | B;"}
{"generated": "   assign q[2] = (q_pos_acc[7] & ~q_neg_acc[7])? 1'b1 : 1'b0;    assign q[1] = (q_pos", "label": "    reg [7:0] q_pos_temp, q_neg_temp, r_temp;"}
{"generated": "black_cell Arr3_black_cell2(in_Pk[6], in_Gk[6], in_Pk[10], in_Gk[10], out_Gk[10], out", "label": "black_cell Arr3_black_cell2(in_Pk[6], in_Gk[6], in_Pk[10], in_Gk[10], out_Gk[10], out_Pk[10]);\r"}
{"generated": "   # (`CYCLE);", "label": "    # (`CYCLE);"}
{"generated": "= 0;reg [7:0] threshold = 0;", "label": "reg [7:0] threshold;"}
{"generated": "output reg oE,output reg oRW,output reg oR,output reg oWrite,output reg oEnable,output reg oBacklight,output reg oLCD,output reg oLCD_Enable,output reg oLCD", "label": "\t\t\t\t\tif(Cont<CLK_Divide)"}
{"generated": "00;\tend else begin\t   read_pointer <= read_pointer_next;\t   empty <= empty_next;\t   read_enable_out <= read_enable_out_next;\t   read_addr_out", "label": "\tread_addr_gray_next = read_addr_gray;"}
{"generated": "   reg [31:0] memory [0:1023];", "label": "    reg [31:0] Memory [63:0];"}
{"generated": "\telse if (en_cnt)\r\t\tcnt <= cnt + 1;\r", "label": "\telse if (en_cnt)\r"}
{"generated": "initial begin", "label": "initial begin"}
{"generated": "\r    initial begin\r", "label": "    initial begin\r"}
{"generated": "\r  // assign the values of the sum and carry out of the full adder\r  assign s = a ^ b ^ cin;\r  \r  assign cout = (a & b) | (cin & (a ^ b));\r ", "label": "  assign s = cin ^ a ^ b; \r"}
{"generated": "off\r", "label": "\tinput\t[3:0]  data2x;\r"}
{"generated": ";\r\t\t\t\tjump = 1'b0;\r\t\t\t\tbranch = 1'b0;\r\t\t\t\tpc_src2 = 1'b1;\r\t\t\tend\r\t\t\t7", "label": "\t\t\t\t\t\talu_src = 1'd1;\r"}
{"generated": "bor    );    assign diff=a^b;    assign bor=~a&b;endmodule", "label": "    assign diff=a^b;"}
{"generated": "   wire [15:0] r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13", "label": "    datapath DataPath(clk, clk_enable,"}
{"generated": "seq_wire = {24'h0, 24'h1, 24'h2, 24'h3, 24'h4, 24'h5, 24'", "label": "\t.wr_en(wr_en),"}
{"generated": "fifo_full = full_2;\r\r\r", "label": "fifo_full = full_2;\r"}
{"generated": "| (a&cin) | (b&cin);", "label": "module add_sub("}
{"generated": "1)  begin      cnt<=3'b000;      f2<=~f2;  end    else cnt<=cnt+1;  end  assign fsk_code_sin_out=f1;  assign", "label": "  assign fsk_code_sin_out=(m_ser_code_in)? f2:f1;"}
{"generated": "always @ (posedge clk) begin        clock_25 = !clock_25;    end    always @ (posedge clk) begin        if (clock_50) begin            if (hcount == 640", "label": "        clock_25 = !clock_25;"}
{"generated": "               #500 wdata =  'd105;\r               waddr = 3'b101;\r               \r                #600 wdata =  'd106;\r               waddr =", "label": "          #550 wdata =  'd105;\r"}
{"generated": "hrestn = 1'b0;", "label": "hrestn = 1'b0;"}
{"generated": "assign x3 = (b & c);assign x4 = (a | b);assign f1 = x1 | x2;assign f2 = x3 | x4;", "label": "assign x3 = (b & c);"}
{"generated": "\u503c\r\t\t\t\tCnt_ud = 1'b0;\t\t//0\t\u4e0b\u884c\u8ba1\u6570\u5173\r\t\t\t\tPlace_cup = 1'b0;\r\t\t\t\tInject_cof", "label": "\t\t\t\t\t\tRefund = 1'b0;\r"}
{"generated": "= 48;", "label": "\toutput\t[11:0]\tCH3;"}
{"generated": "           #10  ps2_clk_i = 0;", "label": "        #5  ps2_clk_i = 0;"}
{"generated": "always @(posedge clk or negedge rst_n) begin\r     if(!rst_n)             data_reg <= 8'd0;\r     else if(rx_done) data_reg <= rx_", "label": "always @(posedge clk or negedge rst_n) begin\r"}
{"generated": "0;    #500000;    uart_tx_en = 1;    #10000;    uart_tx_en = 0;    #500000;", "label": "    uart_tx_data = 0;"}
{"generated": "= 1'b0;\t\ti10 = 1'b0;\t\ti20 = 1'b0;\t\ti30 = 1'b0;\t\ts10 = ", "label": "\t\ts10 = 1'b0; s00 = 1'b0;"}
{"generated": ": 2018/2018_grad_cell/huffman.v", "label": "  gray_data = pat_mem[i];"}
{"generated": "                               if(count == 12'd2093)", "label": "module clkgen_200kHz("}
{"generated": "assign win = win_w ;\r", "label": " assign win = win_w;\r"}
{"generated": "begin        if (count == dividerBy) begin            new_clock <= ~new_clock;            count <= 1;        end        else begin            count <= count + 1;        end    end    endmodule", "label": "        if(count == dividerBy)"}
{"generated": "5 : 0] res", "label": "always @(posedge clk) begin"}
{"generated": "[127:0]keyIn;\rinput clkIn;\routput [127:0]cipherOut;\r", "label": "addRoundKey rk1(state,dataIn,keySet[1407:(1407-128+1)]);\r"}
{"generated": "temp[0] == 1 && temp[1] ==1)begin\r", "label": "      blue <= 2'b11; \r"}
{"generated": "\tns_ps2_transmitter = PS2_STATE_3_TRANSMIT_DATA;\r", "label": "\t\t\t\t.data_a (data),\r"}
{"generated": "if(MemWr==1) mem[addr] <= data[7:0];    if(MemWr==1) mem[addr+1] <= data[15:8];    if(MemWr==1) mem[", "label": "        mem[addr+2]<=data[15:8];"}
{"generated": "    input[31:0] Rt,", "label": "                    ALUCtrl==ALU_Slt?($signed(SrcA)<$signed(SrcB)): "}
{"generated": "df d4(.clk(out[3]),.rst(rst),.d(qb[4]),.q(out[4]),.qb(qb[4]));df d5(.clk(out", "label": "df d4(.clk(out[3]),.rst(rst),.d(qb[4]),.q(out[4]),.qb(qb[4]));"}
{"generated": "16]];                                                     ID_EX_type <=#2 IF_ID_IR[15:12];                     ID_EX_IR <=#2 IF_ID_IR;                     ID_EX_", "label": "              SLTU : EX_MEM_ALUOut  <=#2 (ID_EX_A < ID_EX_B )? 1:0;"}
{"generated": "data_[x + 1] <= count_temp;", "label": "assign CNT2 = gray_data_[2];"}
{"generated": "\tassign gpio = mprj_o[0];", "label": "\t\t$display(\"LA Test seq_gcd(10312050, 29460792)=138 passed\");"}
{"generated": "endmodule", "label": "  initial begin"}
{"generated": "write_to_fifo, read_from_fifo})\\\r   \t\t 2'b00: begin // no button pressed\r   \t\t\t next_write_addr = current_write_addr;\r   \t\t", "label": "   \t\t\t \tempty_buff = 1'b1;\r"}
{"generated": "ball_v_x_out,", "label": "    parameter n = 27"}
{"generated": "1'b1;                                    op_code <= op_exec ? op_rh_wl : op_code;                                    addr_t <= op_exec ? op_addr : addr_t;                                    wr", "label": "                    7'd27: mdio_out <= wr_data_t[4];"}
{"generated": "//    reg [1:0] next_prev_state", "label": "reg clk_send;"}
{"generated": "[3:0] V;    lab2_comparator comp(.V(V), .z(z));    lab2_circuit_a circuit(.V(V), .A(A));    seg_decoder", "label": "    wire [3:0] M;"}
{"generated": "   input [3:0] a,", "label": "    input [3:1]  a,b,c,"}
{"generated": "temp[0] == 1 && temp[1] ==1)begin\r", "label": "\t\tif(temp[0] == 0 && temp[1] ==1)begin\r"}
{"generated": "                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          case (ashi_rindx)                                                                                                                                                ", "label": "        case (ashi_rindx)"}
{"generated": "tractor_test.v", "label": "\t initial begin"}
{"generated": "       A = 3'b010; B = 3'b010; #10;        A = 3'b010; B = 3'b011; #10;", "label": "        A = 3'b010; B = 3'b010; #10;"}
{"generated": "end // main", "label": "integer x1 = 67;"}
{"generated": "     GSR_int = 0;", "label": "\tGSR_int = 1'b1;"}
{"generated": ";assign final_exponent = final_a[30 : 23] + final_b[30 : 23] - 127;assign final_mantissa = mantissa_mult_result[", "label": "assign normal_bit = mantissa_mult_result[47] ;"}
{"generated": "output reg [31:0] PC_out);", "label": "output reg [31:0] PC_out"}
{"generated": "wire islemci_bellek_yaz;", "label": "wire islemci_bellek_yaz;"}
{"generated": "module fulladder(S, Co, A, B, Cin);\r", "label": "and(e0, A, d1);\r"}
{"generated": "`timescale 1ns/1ps///////////////////////// * INPUTS: * * rx       - The input rx signal * * Outputs: * * rx_busy", "label": " * i_clk    - The clock of the local system, used for sampling the bits and FSM sync"}
{"generated": "module mux(s0,i0,i1,y);", "label": "  input s0,i0,i1;"}
{"generated": ":0] filter,\t\tinput signed[BIT_WIDTH-1:0] bias,\t\toutput signed[OUT_WIDTH-1:0] convValue);", "label": "\tfor (x = 0; x < 6; x = x+1) begin : addertree_nodes1"}
{"generated": "notice shall be included in all copies or   * *//* * substantial portions of the Software.                                                                  * *//* * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,        *", "label": "/* * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE * */"}
{"generated": "= \"PORT_UNUSED\",", "label": "output\treg\t[3:0]\t\tVGA_BUS_R;"}
{"generated": " end\r", "label": "\tinput [1:0] dirSelPC;\r"}
{"generated": "", "label": "\treg[31:0] i;"}
{"generated": "\t\t\t\t\t\toutput reg [3:0] char_num,    output reg char_valid,", "label": "        else target_key <= target_key;"}
{"generated": "out = ( (rnw1|rnw2|rnw3) & (sel1&sel2) & ~(sel1&sel3) & ~(sel2&sel3) ) | ( (rnw1|", "label": "module R8B(input clk, input sel, input rnw, inout [7:0]Dio);\r"}
{"generated": "initial begin", "label": "initial begin"}
{"generated": "               prev <= way_in;", "label": "                curr[set_in] = (curr[set_in] + 1) % ASSOCIATIVITY;"}
{"generated": "alu alu(SrcA, SrcB, ALUControl, ALUResult, Zero); // write logic", "label": " mux2 #(32) srcbmux(WriteData, ImmExt, ALUSrc, SrcB);"}
{"generated": "l/dpc_top.v", "label": " .wrst_n(wrst_n));"}
{"generated": "                 output reg [3:0] Hundreds,", "label": "    output reg [3:0] Hundreds, "}
{"generated": "// end", "label": "        ro_led <= ro_led;"}
{"generated": "b0;\twire [0:0] sub_wire8 = 1'b0;\twire [0:0] sub_wire9 = 1'b0;\twire [0:0] sub_wire1", "label": "\twire  c2 = sub_wire3;"}
{"generated": "\t\t\treset,\r\tinput\t\t\t\t\t\twrite_enable,\r\tinput\t[RAM_ADDR_BITS-1:0]\taddress,\r\tinput\t[RAM_WIDTH-1:0]\tdata", "label": "   reg [RAM_WIDTH-1:0] ram_name [(2**RAM_ADDR_BITS)-1:0];\r"}
{"generated": "_FIRE_ST_cycle,       CAN_FIRE_ST_cycle_1,       CAN_FIRE_ST_cycle_2,       CAN_FIRE_ST_cycle_3,       CAN_FIRE_", "label": "  FIFO2 #(.width(32'd80), .guarded(32'd1)) f_7(.RST(RST_N),"}
{"generated": " input clk,reset,    output reg q,qb    );", "label": "    input i,clk,rst,"}
{"generated": "                               data_buf <= data_buf + 32'b1;", "label": "                mon_out[31:0] <= 32'd0;"}
{"generated": "a < b, result is 1. else result = 16'd0; // If a >= b, result is 0. end // If a < b, result is 1. If a >= b, result is ", "label": "endmodule"}
{"generated": "clock,", "label": "endmodule"}
{"generated": "CTU.v", "label": "            FINISH: begin\r"}
{"generated": "module MUX (a, b, sel, out); //2:1 M", "label": "or(bout, and1, and2, and3);\r"}
{"generated": "file[rd_offset] = rs << alu_input;end\telse if (op_code == 4'b0010)begin\t//if sel = 0 then A + B\t\tRegfile[rd", "label": "\t\tRegfile[rd_offset] = rs >> shamt;end"}
{"generated": ".                        0: begin                            M_UART_AWVALID   <= 0;                            M_UART_WVALID    <= 0;                            M_UART_BREADY    <= 0;                ", "label": "    reg[31:0] read_data;        "}
{"generated": "j.always #1 clk = ~clk;//-- Proceso al inicioinitial begin//-- Fichero donde almacenar los resultados$dumpfile(\"fsm2_tb.vcd\");$dumpvars(", "label": "initial begin"}
{"generated": "\toDone;\r\r//\tLCD Side\routput\t[7:0]\tLCD_DATA;\routput\tLCD_RW,LCD_EN,LCD_RS;\r\r//\tInternal Wires/Registers", "label": "output\treg\t\tLCD_EN;\r"}
{"generated": "input a,b,c;", "label": "module mux_2x1_conditionaloper("}
{"generated": "endmodule ", "label": "endmodule "}
{"generated": "synopsys translate_on\r", "label": "`ifndef ALTERA_RESERVED_QIS\r"}
{"generated": "] rx_data_buffer1;    wire rx_converted, rx_data_valid;    // Block RAM related variables    reg  [10:0] bram_write_data;    wire [10:0", "label": "    wire [11:0] bram_read_data;"}
{"generated": "ARR7_REG, ARR8_REG, ARR9_REG;\r   \r   wire [31:0] \t RD;\r   \r   assign RD = (RW == 0) ? mem_cell", "label": "   assign word_addr = ADDR[11:2];\r"}
{"generated": "v_y = 0;", "label": "    wire [7:0] key_in;"}
{"generated": "b0;                    \tif(btn) begin                        \tnext_state = wait0;                        \tdb_tick = 1'b1;                     end                     end        \twait0\t: begin                    \t", "label": "                        \tq_dec = 1'b1;"}
{"generated": "\t.nMREQ(nMREQ);\r\t.nIORQ(nIORQ);\r\t.nM1(nM1);\r\t.nWAIT(nWAIT);\r\t.nINT(nINT);\r\t.", "label": "\t.nMREQ(nMREQ),\r"}
{"generated": "                   $display(\"Error[AND]: out is %b, expected 8\", sim_out);", "label": "            $display(\"Error[AND]: out is %b, expected 0100\", sim_out);"}
{"generated": "(reset) begin\r            state <= IDLE;\r            next_state <= IDLE;\r        end else begin\r            state <= next_state;\r            next_state <= state;\r        end\r    end\r    // State transition logic\r", "label": "            IDLE: begin\r"}
{"generated": "   input_value = 11'b11011011011;", "label": "    input_value = 11'b11011011011;"}
{"generated": "   if (reg_clk_div == 1'b0) begin", "label": "    if (counter == DESIRED_PERIOD - 1) begin"}
{"generated": "   Four_bit_Down_counter Count2(cin[2],clk,led[7:4]);", "label": "    Four_bit_Down_counter Count2(cin[1],clk,led[7:4]);"}
{"generated": "e_reg4 (clk, flush_e, 1'b1, alu_src_d, alu_src_e)\rRegister_1bit cnt_e_reg5 (clk, flush_e, 1", "label": "Register_1bit cnt_m_reg3 (clk, rst, 1'b1, mem_write_e, mem_write_m);\r"}
{"generated": "                                                 \r    // RAM Data Write\r    input [DWIDTH - 1 : 0] i_mem_data,                   // RAM Data Write\r    output reg [AWIDTH - 1 : 0]", "label": "            adc_trg_flag <= adc_trg_flag;\r"}
{"generated": "   if(!pause) begin", "label": "    if (!pause) begin "}
{"generated": "     forever #5 clk = ~clk;", "label": "    forever #5 clk = ~clk;"}
{"generated": "_MEM_RW     = (instruction[31:26] == LBU_Op) ? 1'b1 : 1'b0;    assign ID_MEM_SE     = (instruction[31", "label": "    assign ID_Enable_LO  = (instruction[31:26] == R_TYPE) ? 1'b1 : 1'b0;"}
{"generated": ",\tinput reset,\toutput reg [63:0] current_floor_elevator1_out,\toutput reg [63:0] current_floor_elevator2_out,\toutput reg [6", "label": "\tinput in_emergency_elevator2,"}
{"generated": "\toutput\t\t          \t\tARDUINO_TXD,\r\tinput \t\t          \t\tARDUINO_RXD,\r\toutput\t\t          \t\tARDUINO_LED0\r);", "label": "\tinout \t\t    [35:0]\t\tGPIO\r"}
{"generated": "in_Gk[2], in_Pk[3], in_Gk[3], out_Gk[3], out_Pk[3]\rgray_cell Arr1_gray_cell1(in_Gk", "label": "black_cell Arr1_black_cell2(in_Pk[3], in_Gk[3], in_Pk[4], in_Gk[4], out_Gk[4], out_Pk[4]);\r"}
{"generated": "]) | (~DATA_B[WIDTH-1] & DATA_A[WIDTH-1] & OUT[WIDTH-1][<=WIDTH-2]\r\t\tend\r\t\tAddition:begin\r\t\t\tOUT = DATA", "label": "\t\tMove_Not:begin\r"}
{"generated": "       output s, c_out,", "label": "    output s, c_out"}
{"generated": "IRWr, MemRd, RegWr} = 4'b100;                        3'b001: {IRWr, MemRd, RegWr} = 4'b100;                        ", "label": "            {ALUSrcA, ALUSrcB, DataSrc, WrDataSrc, MemRd, ExtSel, RegDst, ALUCtrl} <= 12'b000101000110;"}
{"generated": "           if(en == 1'b1)", "label": "        if(mainState == 2'b10 && B2 == 1'b1 && B3 == 1'b0 && B4 == 1'b1 && reset == 1'b0 && globalReset == 1'b0 && en ==1'b0) "}
{"generated": "                                                // Blue Partinput [Class_in_bit -1 : 0] B2_IN,input [Class_in_bit -1 : 0] B3_IN,input [Class_in_bit -", "label": "input [Class_in_bit -1 : 0] B2_IN,"}
{"generated": "\t\t.apple_x(apple_x), ", "label": "\treg up_key_last;"}
{"generated": "       .ALU_FUN(ALU_FUN[1:0]),    .CLK(CLK),    .RST(RST),    .Logic_En(Logic_EN),    .Logic_Out(Logic_", "label": "    .ALU_FUN(ALU_FUN[1:0]),"}
{"generated": "       else        begin            if (flush)            begin                Branch_EX <= 0;                RegWrite_EX <= 0;                RegDst_EX <= 0;                MemRead_EX <= 0", "label": "            MemtoReg_EX <= 0;"}
{"generated": "   ALUOP               =2'b01;\r    o_Jal_R             =1'b1;\r    o_LUI_D             =1'b1;\r    end\rS_type_OP   :", "label": "    ALUOP               =2'b01;\r"}
{"generated": "module WriteFull #(parameter address=3)(write_clk,write_rst,write_inc,sync_read_ptr,write_ptr,write_addr,full);", "label": "module WriteFull #(parameter address=3)(write_clk,write_rst,write_inc,sync_read_ptr,write_ptr,write_addr,write_full);"}
{"generated": "assign F = A & B;", "label": "module and_gate("}
{"generated": "(8'b0),         // 9-bit input: Counter value input", "label": "    output wire        done"}
{"generated": "       memory[8] = {4'h8, 20'h0, 4'h8, 4'h8};", "label": "        memory[8] = {4'h8, 20'h0, 4'h8, 4'h8};"}
{"generated": "   , \r", "label": "    always @(posedge clk_out or posedge rst) begin\r"}
{"generated": "   initial begin", "label": "    initial begin"}
{"generated": "   input wire enable,", "label": "    input wire enable,"}
{"generated": "0] next_temp_money;\r", "label": "\t\tclk_one_sec=~clk_one_sec;\r"}
{"generated": "0;\t\t// 1/2^(10) = 0.00048828125\t\t    LVL3 : / 16       grid_ROM[3] = 3", "label": "    always @(posedge clk) begin"}
{"generated": "clk_n,  //output wire dp_rx_lane_p,  //output wire dp_rx_lane_n  );", "label": "   .AUDIO_L(AUDIO_L),"}
{"generated": "r <= c_real;\r\t\t\tz_n_img_r <= c_img;\r\t\t\tz_n1_img_r_stage1 <= z_n_img_r;\r\t\t\tz_n", "label": "        default: begin\r"}
{"generated": "   dst_reg, alu_src_b, reg_write, mem_reg, mem_write, jump, branch, shamt, jr, aluop);\r\rend\rendmodule\r", "label": "    DUT.DstReg, DUT.ALUSrcB, DUT.RegWrite, DUT.MemtoReg, DUT.MemWrite, \r"}
{"generated": "   input                                                     AXI_AWREADY,    input[2:0]                       AXI_AWPROT,    // \"Write Data\"                 -- Master --    -- Slave --    output reg [", "label": "    output     [2:0]                    AXI_AWPROT,"}
{"generated": "    ALU U1(Din1,Din2,Sel,w1);", "label": "ALU ALU_inst(.Din1(Din1), .Din2(Din2), .Sel(Sel), .Tmp(w1));"}
{"generated": "_Gk[3], in_Pk[11], in_Gk[11], out_Gk[11]\rblack_cell Arr4_black_cell0(in_Pk[8], in_", "label": "gray_cell Arr4_gray_cell4(in_Gk[4], in_Pk[12], in_Gk[12], out_Gk[12]);\r"}
{"generated": "\t\t\tcurrent_pc <= nextPC;", "label": "    output reg [31:0] readData"}
{"generated": "   reg [2:0] Current_state, Next_state;", "label": " always@(posedge clk or negedge rst_n)"}
{"generated": ", MemWrite, Jump, Branch, BranchNe, ZeroFlag, Imm_extended;\twire [31:0] address, readData, writeData;\t// Unidade de leitura\td_mem d_", "label": "\twire [4:0] rd = instruction[15:11];"}
{"generated": "#(period/2) clk = ~clk; ", "label": " #(period/2) clk = ~clk;"}
{"generated": "if (~rst_n) begin            done_cnt <= 0;        end        else if (done) begin            done_cnt <= done_cnt + 1;        end    end    // All pass    always @(", "label": "                $display(\"\\033[1;31m-----------------------------------------------------------------------------------------\\033[0m\\n\");"}
{"generated": "hsync) begin\r            if(DATA_WRITE_R0 != 0) begin\r                out_BMP[(l*WIDTH+m)*3+2] <= DATA_WRITE_R0;\r                out_B", "label": "            out_BMP[WIDTH*3*(HEIGHT-l-1)+6*m+5] <= DATA_WRITE_R1;\r"}
{"generated": "[WIDTH-1:0]    \tBEQU\t=\t4'b1111 ; \r\ralways @(*) begin \r", "label": "\t\tSLL\t   : alu_out = oprend_1 << oprend_2;\r"}
{"generated": "                       output reg p,          btwo,          bthree,          Buzzer,", "label": "    output reg [1:0] mainState,"}
{"generated": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .loadbrREG(w_loadbr), \t\t\t\t\t\t\t .loadarREG(w", "label": "\t\t\t\t\t\t .loadbrREG(w_loadbr), "}
{"generated": "] <= 0;end else if (we==1)begin mem[wr_ptr] <= din;end end//reading logicalways@(posedge clk)begin if(!rst)begin wr_ptr <= 0;", "label": "{mem[wr_ptr[3:0]][8], mem[wr_ptr[3:0]][7:0]} <= {lfd,din};"}
{"generated": "module MUX4to1(input in0, in1, in2, in3, sel0, sel1, out);", "label": "module Mux4to1(input [0:3] in, input [1:0] s,output out);"}
{"generated": "Example button C press        wait for 10 ns;        btnC_tb <= '0';        wait for 50 ns;        btnL_tb <= '1'; -- Example button L press        wait for 10 ns", "label": "        wait for 50 ns;"}
{"generated": "Q = A - (B*Q1);\r    assign R = A - (B*Q1);\r    assign Q1 = A / B;\r    assign Q = Q1 << 1;\r    assign Q = Q[7:0", "label": "always @(A or B) begin\r"}
{"generated": "1) begin\r         a[i] = data[i];\r      end\r      for(i=0; i<28; i=i+1) begin\r         b[i] = data[i+28", "label": "         a = data[i*3+0];\r"}
{"generated": "_component.port_enable0 = \"PORT_UNUSED\",\t\taltpll_component.port_enable1 = \"PORT_UNUSED\",\t\taltpll_component.port_extclk = \"PORT_UNUSED\",\t", "label": "\t\taltpll_component.port_clk1 = \"PORT_UNUSED\","}
{"generated": ": begin        for(i=0;i<16;i=i+1)            acti[i] <= ow[i*2+1];    end    RD_OW: begin        for(i", "label": "                7'd6: outbuf[6] <= outbuf[6] + sum_aw;"}
{"generated": "       .sIgn   (sIgn),", "label": "    .sIgn   (sIgn),"}
{"generated": "_din_nic),\r", "label": "        if (reset) begin\r"}
{"generated": "       if (RWMode == 1) begin            //read            dataOut = memDataOut;        end", "label": "        if(RWMode == 0 && address !==32'bX) begin"}
{"generated": "0] rom_addr_row,  output reg rom_en_row,  output reg [31:0] rom_data_row,  // ConV1  output reg [15:0] rom_addr_", "label": "parameter offset1_ow = 9'd0, offset2_ow = 9'd24, offset3_ow = 9'd60;"}
{"generated": "   assign (strong1, weak0) PRLD = PRLD_int;", "label": "    assign (weak1, weak0) PRLD = PRLD_int;"}
{"generated": "55]),\r", "label": "    plugboard2  <= plugboard_nxt[2];\r"}
{"generated": ";\r        4'b1000: segmentos=7'b1000000;\r        4'b1001: segmentos=7'b0000010;\r        4'", "label": "        4'b1000: segmentos=7'b0000000;\r"}
{"generated": "];\tassign pos21 = !pos2[1] & pos2[0];\t\t\talways @ (posedge clk)", "label": "\t\t\t\t\thp1 = hp1!=3 ? hp1+1 : hp1;"}
{"generated": "mem1[address] <= WriteData;\r", "label": "mem1[address] = WriteData;\r"}
{"generated": "1100;\r        4'b0101: segmentos=7'b0100100;\r        4'b0110: segmentos=7'b0100000", "label": "        4'b0101: segmentos=7'b0100100;\r"}
{"generated": "", "label": "\t\t\t\tout = 1'b1;"}
{"generated": "       $finish;    end    $display(\"----------------------------------------\");    $display(\"----------------Stage 2-----------------\");    $display(\"--------- MAS_2input Simulation Begin ---------\");    $display(\"----------------------------------------\");   ", "label": "        $display(\"----------------------------------------\\n\");"}
{"generated": "7'd32:Dout=A[32];", "label": "\talways@(posedge clk)begin"}
{"generated": "icks_per_milli * 1000;  wire [31:0] ticks_per_minute = ticks_per_second / 60;  wire [31:0] ticks_", "label": "      sound <= 0;"}
{"generated": "h80000000, 1'b1, 32'hffffffff, 1'b1, 1'b0, 1'b1, 1'b1);        run", "label": "        run_test(OP_AND,            32'h80808080, 32'hff00ff00, 1'b0, 32'h80008000, 1'b0, 1'b0, 1'b1, 1'b0);"}
{"generated": ".        // If they do, we'll start the write process.                        0: begin                            uart_write_state <= 1;                            M_UART_AWVALID   <= 1;                            M_", "label": "                amci_write <= 1;"}
{"generated": "           s0: out =1'b0;", "label": "            s0: out =1'b0;"}
{"generated": "addressend@(posedge hclk)#1beginhtrans=2'd0; //ideal(no transction)hsize=3'b001; //16 bit transferhburst=3'", "label": "@(posedge hclk)"}
{"generated": "wire [2:0] intrID_tb;    wire [2:0] intrID_tb_1;    wire [2:0] intrID_tb_2;    wire [2:0] intrID_tb", "label": "        pulse2=1'b1;pulse1=1'b0;"}
{"generated": "input wire reset,\r    input wire [7:0] instruction_in,\r    input wire [7:0] data_in_0,\r    input wire [7:0] data_in_1,\r    input wire [7:", "label": "reg cmp_result = 0;\r"}
{"generated": ")); sky130_fd_sc_hd__decap_3 PHY_2 (.VGND(vssd1),    .VNB(vssd1),    .VPB(vccd", "label": "    .VPWR(vccd1));"}
{"generated": "_2[0] ) ;", "label": "\t\t\t\t\tspi_addr <= spi_addr + 1;"}
{"generated": "tb    assign A0_internal = A0_tb    assign SP__internal = SP__tb    assign R_internal = R_tb    assign sngl_internal = sngl_tb    assign LEVEL_internal", "label": "        .INTERNAL_INT(INTERNAL_INT_internal),  "}
{"generated": "`ifdef NO_ONE_SEC_GEN", "label": "\t.P_COUNT_BIT\t(P_COUNT_BIT) "}
{"generated": "           HIGH_ALERT: begin                if (wind<=10 && visibility==2'b00) begin                    nextState = ALL_CLEAR;                end                if (wind>15 || temperature<", "label": "        HIGH_ALERT: begin"}
{"generated": "2Stage.v", "label": "\t\t\t\t\t.B(xor1[7:0]),\r"}
{"generated": "but not limited to netlists, ", "label": "--               |              |               |"}
{"generated": "\t\tif (loadbr == 1'b1)", "label": "\t\tif (done == 0) begin"}
{"generated": "endmodule", "label": "`include  \"../tv80_lib/8085_instr_set.v\" "}
{"generated": "                                                                                       1'b0: led[0] <= (count_ms <= count_s) ? 1'b0 : 1'b1;\r", "label": "                        1'b0: led[0] <= (count_ms > count_s) ? 1'b1 : 1'b0;\r"}
{"generated": "       in1 = 8'b00000000;", "label": "        in1 = 8'b00000000;"}
{"generated": "board-level 7-segment displayoutput [7:0]  HEX3;   // board-level 7-segment displayoutput [7:0]  HEX4;   // board-level 7-segment display", "label": "localparam [9:0] squareRowEnd = 250;"}
{"generated": ",B,Cin,sout,cout);    A = 4'b0101;    B = 4'b1101;    Cin = 1'b0;    $display(\"A =", "label": "    A = 4'b0001;"}
{"generated": "\t#100 $finish(); // [stop(), $finish()]  end", "label": "\t#1 \t\ta = 1'b0;b = 1'b0;"}
{"generated": "110000);", "label": "\t\tfor(i=0;i<32;i=i+1)begin"}
{"generated": "module program_counter( input clk,rst,input [31:0] data_in, output reg [31:0] data_out \r", "label": "RAM            ram1(clk,rst,wre,ram_in,ADD,data_out,done);\r"}
{"generated": "15:0]\tRegister7; reg\t\t[15:0]\tRegister8; reg\t\t[15:0]\tRegister9; reg\t\t[15:0]\tRegister10; reg", "label": "always @( posedge mdc_i ) "}
{"generated": "     assign ose_teli = mA | mB;", "label": "   assign ose_teli = mA | mB;"}
{"generated": "   #10    driver <= 100;", "label": "    driver = 200;"}
{"generated": "   case(ALUControl)", "label": "    case (ALUControl)"}
{"generated": "                                                                                                                                                                                                                                                                                                                                           Arith_Flag_Comp = 1'b0;", "label": "            {Carry_Out_Comp, Arith_Comp} = 'b0;"}
{"generated": "       fd = $fopen(\"C:\\\\Vivaldo\\\\Project\\\\image3.txt\", \"r\");", "label": "        fd = $fopen(\"C:\\\\Vivaldo\\\\Project\\\\convolResult.txt\", \"w\");"}
{"generated": "= $signed ({current_insrt[31:25], current_insrt[11:7], 20'b0}) >>> 20;\rassign immediate = (current_insrt[31:2", "label": "\t\t\t\t   (current_insrt[6:0] == 7'b1101111) ? J_imm:\r"}
{"generated": "               .rx         (rx) ,\r                .tx         (tx) ,\r                .data       (data) ,\r                .data_flag  (data_flag)\r                );\r", "label": "                .data        (data),\r"}
{"generated": "      CAN_FIRE_RL_cycle_12,", "label": "       WILL_FIRE_RL_rule_tb_2,"}
{"generated": "b = 1; #10;in_clka = 0; in_clkb = 0; #10;in_clka = 1; in_clkb = 0; #10;in", "label": "in_solved = 1'b0;"}
{"generated": "reg5,  w_reg6,  w_reg7,  w_reg8,  w_reg9,  w_reg10,  w_reg11,  w_reg12,  w", "label": "/*---------> Writing on LCD <---------*/\r"}
{"generated": ":0] vec_b_o;    output reg [(BW*Elements_Num)-1:0] c_flat_out;    output reg done_sig_o;    reg [1:0] current_state", "label": "            for (col = 0; col < MAX_DIM; col = col + 1) begin: col_loop"}
{"generated": "       .RDATA(RDATA),    .RRESP(RRESP),    .RVALID(RVALID),    // write address channel    .AWVALID(AWVALID),    .AWADDR(AWADDR),    .AW", "label": "    .RDATA(RDATA),"}
{"generated": "mux_Desloc MUX_4(\r                A_out,\r                B_out,\r                Desloc_mux,\r                Desloc_Control,\r                Desloc_src\r       ;\r        mux_AL", "label": "        Un_16_to_32bits un_16_32(\r"}
{"generated": "2] == sw_reg[3]))\r\t\t\t\tout <= 1'b1;\r\t\t\telse\r\t\t\t\tout <= 1'b0;\r\t\tend\r\tendmodule\r\t\rmodule", "label": "\talways @(posedge clock)\r"}
{"generated": "(\t\t.input_1(sign_extend_out),\t\t.input_2(instruction_memory_read_data[31 : 16]),\t\t.select(controll_unit_ALU_", "label": "\twire [PC_INPUT_LENGTH - 1 : 0] adder_in_2_mux_out;"}
{"generated": "2\u00aaVA", "label": "\t\t\tcurrent_pc = 32'b0;"}
{"generated": "\t\t.RegDst(Instr[25]),\r", "label": "    assign carry = (ALUControl[1] ==1'b0) & sum[32];\r"}
{"generated": "                                                                                                                                                                                                                                                                                                                           s2: if(in==1)", "label": "            s2: if(in==1)"}
{"generated": "0] ALU_RESULT;    wire [31:0] WD;    wire [31:0] RD1;    wire [31:0] RD2;    wire [3:0] AL", "label": "    wire [31:0] WD;"}
{"generated": "-- Fichero donde almacenar los resultados  $dumpfile(\"fsm1_tb.vcd\");  $dumpvars(0, fsm1_tb);  # 5 S1 <= 1; ", "label": "  $dumpfile(\"fsm1_tb.vcd\");"}
{"generated": "1):0] data_A_before_FF;", "label": "     .data_RE(data_RE),"}
{"generated": "   always @(posedge clk) begin", "label": "    always @(posedge clk) begin"}
{"generated": "0;\\\r        EPC_write = 0;\\\r        ir_write = 0;\\\r        PC_write = 0;\\\r        A_write = 0;\\\r        B_write = 0;\\\r       ", "label": "                                MFLO: begin\r"}
{"generated": "d25:Dout=A[25];", "label": "\twire [7:0]x;"}
{"generated": "_clk or posedge clr)\tif(clr)\t\twr_clr <= 1'b1;\telse\tif(!wr_clr_r)\twr_clr <= 1'b0", "label": "\t.waddr(\t\twp_bin[aw-1:0]\t),"}
{"generated": "0 - dontcare]", "label": "    reg [ADDR_WIDTH-1:0] paddr;"}
{"generated": ";\r            ALUSrc      = 1;\r            ALUOp       = funct3;\r            MemOp       = 0;\r            Branch      = 0;\r            Jump        = 0;\r            JumpAndLink = ", "label": "            Branch      = 0;\r"}
{"generated": "  :  1  :  1    ; // reduce pessimism        endtableendprimitive`endif // NO_PRIMITIVES`default_nettype wire`endif  // SKY130_FD_SC", "label": "`default_nettype wire"}
{"generated": "       a = 1'b1; b = 1'b0;\r        #100\r        // Test case 4\r", "label": "        a = 1'b1; b = 1'b0;\r"}
{"generated": "   always @(*)\r", "label": "    always @(*)\r"}
{"generated": "//Agreement (the \"Agreement\") that accompanies the software //and tools. By using the software and tools, you agree to be //bound by the terms of the Agreement. You may obtain a copy //of the Agreement at", "label": "\t\t\t\t.address_b (1'b1),"}
{"generated": "0] clock;wire [`NOTE_BITS-1:0] note;wire [`LENGTH_BITS-1:0] length;wire over;wire en_set;wire en_back;wire [`NOTE_KEY_BITS", "label": "wire [`NOTE_BITS-1:0] note;"}
{"generated": "assign R = A % B;\rendmodule\r", "label": "assign R = A%B;\r"}
{"generated": "\t\t\t\t\t\t\t\t\t\tinput\t[RAM_ADDR_BITS-1:0]\taddress,\tinput\t[RAM_WIDTH-1:0]\tinput_data,\toutput\t[R", "label": "    input \t\t[RAM_ADDR_BITS-1:0]\taddress,"}
{"generated": "tract_Field\r", "label": "  parameter   EXTRACT_NO_DELAHY     = 1"}
{"generated": "0_fd_sc_hd__decap_3 FILLER_0_2_53 (); sky130_ef_sc_hd__decap_12 FILLER_0_2_57 ();", "label": " sky130_ef_sc_hd__decap_12 FILLER_0_3_15 ();"}
{"generated": "_mem[10'd14] , instr_mem[10'd13] , instr_mem[10'd12]}    = 32'b000000000", "label": "        {instr_mem[10'd19] , instr_mem[10'd18] , instr_mem[10'd17] , instr_mem[10'd16]} = 32'b00000010000001000000000100000000;"}
{"generated": "`define DTAG_SIZE (`WORD_SIZE - `DOFFSET_SIZE - `INDEX_SIZE) // bits needed to represent the tag.", "label": "        default: ALUControl = `ADD_FUNCT3;"}
{"generated": "   reg [3:0] queue_next;    // Output registers    reg [7:0] tail_reg;    reg empty_reg;    // Internal wires    wire [7:0] queue_data;    wire", "label": "    reg [7:0] result;"}
{"generated": " reg clk;", "label": "  reg clk = 0;"}
{"generated": "reg_result = temp_B >> shift_amount;                end            end            6'b000110: begin        //srlv:rt\u53f3\u79fbrd\u4e2a\u4f4d\u7f6e\uff0c\u7136\u540e\u628a\u7ed3\u679c\u5b58\u5230", "label": "            reg_result = temp_B - temp_A;"}
{"generated": "       packet_id <= 0;", "label": "        packet_id <= 0;"}
{"generated": "_tri_t[63] ? 0 : gpio_tri_o[63];   assign  gpio_tri_i[62] = KEY2;   assign  gpio_tri_i[6", "label": "   wire        M_AXI_ACP_RVALID;"}
{"generated": "begin : main", "label": "begin : main"}
{"generated": "punch2=0;\t\t\t\t#40\t\tpunch1=1;\t\tkick1=1;\t\t#10\t\tpunch1=0;\t\tkick1=0;", "label": "\t\t#25 clk=~clk;"}
{"generated": "\t\tmaster_data[23:16] <= p_in[23:16);\r\t\t\tend\r\t\t\tif(byte_sel[3])\r\t\t\tbegin\r\t\t\t\tmaster", "label": "\t\t\tif(byte_sel[3])\r"}
{"generated": "   o_out = count;            end            else begin                o_out = 32'b0;            end        end    endendpath", "label": "        o_out = count;"}
{"generated": "48;", "label": "\toutput\t[11:0]\tCH7;"}
{"generated": "  output reg                   in_tready,", "label": "   reg [11:0]      w_ptr; "}
{"generated": "       if (rst) rptr <= 0;\r", "label": "        if (rst) begin \r"}
{"generated": "   $dumpfile(\"Comparator_4bits_tb.vcd\");", "label": "    $monitor(\"A = %b , B = %b , A_lt_B=%b,A_gt_B=%b,A_eq_B=%b, success=%b\",A,B,A_lt_B, A_gt_B, A_eq_B, (((A>B&A_gt_B)|(A<=B&!A_gt_B))&((A<B&A_lt_B)|(A>=B&!A_lt_B))&((A==B&A_eq_B)|(A!=B&!A_eq_B))));"}
{"generated": "                                                                                                                                                                                                                                                                                                           2'd5: out[1:0] <= 2'b00;", "label": "            default: out[1:0] <= 2'b00;"}
{"generated": "tube2 <= mn_tube2;                    end                    `auto_mode: begin                        led <= Auto_led;                        buzzer <= Auto_buzzer;                        seg_en <= mn_", "label": "                                    7'b0000010: menu_song <= `two_tigers;"}
{"generated": "10   3   4]if (Z == 20'b1011011011_1111111010_0000000011_1", "label": "\t$display(\"---------------------------------------------\");"}
{"generated": "DC FIFO top level module", "label": "\t   data_in_internal <= 4'b0000;"}
{"generated": "initial begin", "label": "calc calc_uut(.led(led), .sw(sw), .clk(clk), .btnc(btn_state[1]), .btnl(btn_state[2]), .btnu(btnu), .btnr(btn_state[0]), .btnd(btnd));"}
{"generated": "ns / 1ps", "label": "reg [7:0]   \tfifo_data_next[0:7];"}
{"generated": "   end\r    assign w_addr = w_bin[ADDR_BITS-1:0;\r    assign w_bin_next = w_bin +( w_inc & !w_full);\r    assign w_gray_next", "label": "    assign w_addr = w_bin[ADDR_BITS-1:0];\r"}
{"generated": "wire            cram1_oe_n,\routput  wire            cram1_we_n,\routput  wire            cram1_ub_n,\routput  wire            cram1_lb_n,\\\rinout  ", "label": "    .video_rgb              ( video_rgb ),\r"}
{"generated": "   $finish;  end  // Output waveforms  always @(posedge clk_tb) begin    $write(\"out_tb = %h\\n\", out_tb);  end  // End of testbench  endmodule", "label": "    #10 $finish;"}
{"generated": "`timescale 1ns / 1ps ", "label": "**********************************************************************/"}
{"generated": "     mux_block block (m[i],n[i],sel[i+1],m[i+1],n[i+1]);", "label": "      mux_block block("}
{"generated": "1'b1}}),\t\t\t\t.extclkswitch (1'b0),\t\t\t\t.extclkenable ({4{1'b1}}),\t\t\t\t.extclkout ({4{1", "label": "\t\taltpll_component.inclk0_input_frequency = 20000,"}
{"generated": "-----------------------------------------------------------------------------\r", "label": "\toutput nQ; wire nQ;\r"}
{"generated": "\t\tmem_8x8_1[j+8*5],\r", "label": "Data_1_Add_6,\r"}
{"generated": "", "label": "\t\t\t\t\tincr_reg <= incr_next;\r"}
{"generated": "       .waddr (apb_addr),    .wdata (apb_wdata),    .rdata (mem_dout),    .raddr (paddr),    .rdata_o (prdata));", "label": "    .addr (apb_addr),"}
{"generated": "\t\t(rcv_full\t\t\t\t),\t// output wire full\r\t.empty\t\t\t\t\t\t\t\t(rcv_empty\t\t\t\t),\t// output wire empty\r\t.wr_data", "label": "Computation InstComputation(\r"}
{"generated": "        WAIT_TILL_EMPTY : ", "label": "reg [7:0]header,int_reg,int_parity,ext_parity;"}
{"generated": "   if (i_rst) begin", "label": "    if (i_rst) begin"}
{"generated": "           for(k=30;k>=0;k=k-1)begin\r                //32\u4f4d\u6570\u636e\u5199\u5165DTMemory[31:0]\uff0c\u4ece\u9ad8\u4f4d\u5f00\u59cb\u5199\u5165\r                DTMemory", "label": "            DTMemory[30]<=32'h00000000;\r"}
{"generated": " q );", "label": "  input       [width-1:0]   data;"}
{"generated": "B=6'b101010;\rfxn = 3'b111;\r# 100;\r//test vector 7\rA=6'b111100;\rB=6", "label": "B=6'b000011;\r"}
{"generated": "22], B[22]);\t or or_gate23(result[23], A[23], B[23]);\t or or_gate24(result[24], A[24], B", "label": "\t not (B_complement[2], B[2]);"}
{"generated": "                   dout <= mem[addr];", "label": "            dout <= mem[addr];"}
{"generated": "always @(posedge clka)", "label": "always @(posedge clka)"}
{"generated": "4 = 32'hB0A0A0A0;localparam G11_5 = 32'h80000000;/************************************************\u751f\u6210\u77e9\u9635************************************************/", "label": "                                m_axis_tdata<=check[n-k-1:n-k-width];"}
{"generated": "_11100_0: begin code = 10'b001111_1010; next_rd = flip; end\r\t\t\t9'b101_111", "label": "\t\t\t9'b111_11110_0: begin code = 10'b011110_1000; next_rd = same; end\r"}
{"generated": "    debouncer_delayed_fsm ddf(.clk(clk), .reset_n(reset_n), .noisy(noisy), .timer_done(timer_done), .timer_reset(timer", "label": "    debouncer_delayed_fsm FSM("}
{"generated": "begin", "label": "            if (gout) begin"}
{"generated": "EI_n <= 1'b1; EA <= 1'b0; LA_n <= 1'b0; end;\r\t\t\t\t\t\t\t\t6'b010000:", "label": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t4'b0011: {Lm_n,EI_n} <= 2'b00;\r"}
{"generated": "                                                                                                                                                                                                                                                   parameter TAG_BITS      = ADDRESS_BITS - SET_BITS,", "label": "    parameter TAG_BITS      = ADDRESS_BITS - BLOCK_BITS - SET_BITS,"}
{"generated": "\tns_ps2_transmitter = PS2_STATE_3_TRANSMIT_DATA;\r", "label": "reg\t\t\t\tps2_data_reg;\r"}
{"generated": "80:Dout=A[80];        7'd81:Dout=A[81];        7'd82:Dout=A[82];        7'd83:Dout", "label": "        7'd100:Dout=A[100];"}
{"generated": "generation block------------------  always@(posedge clock)  begin    if(~resetn)    count0<=0;    else if(read_enb_0)    count0<=count0+1;  end ", "label": "  else if(vld_out_0)"}
{"generated": "           8: active = 1'b1;", "label": "            8: active = 1'b0;"}
{"generated": "~d) : d;\r    // d = dataIn, s0 = addr[1], s1 = addr[0]\r    // d = dataIn, s0 = addr[1], s1 = addr[0], out =", "label": "                 .write_data_sel(write_data_sel), .dataOut(data_rd), .set_valid(set_valid), .valid(valid), .set_dirty(set_dirty), .dirty(dirty), .set_tag(set_tag), .tag(tag));\r"}
{"generated": "initial", "label": "\tinitial begin"}
{"generated": "end", "label": "    src_num = 128; #1 $display(\"Source number = %d; Result number = %d\", src_num, log_src_num);"}
{"generated": "                   if(SnakeBodyIndex2 < SnakeSize - 1) begin", "label": "            for(SnakeBodyIndex = SNAKE_MAX_SIZE - 1 ; SnakeBodyIndex > 0; SnakeBodyIndex = SnakeBodyIndex - 1) begin"}
{"generated": "    reg [7:0] count = 8'b00000000;", "label": "module withdrawal("}
{"generated": "\t\t@(posedge clk);", "label": "    #5 clk <= ~clk;"}
{"generated": "                                                                                                                                                                                                                                                                                                                                                                                                                 .read_data1(), .read_data2());", "label": " .read_data1(),.read_data2()); "}
{"generated": "module alu_slice (input wire [1:0] op, input wire i0, i1, cin, output wire o, cout);", "label": "module demux8 (input wire i, j2, j1, j0, output wire [0:7] o);"}
{"generated": "(1'b1), .ps2d(ps2d), .ps2c(ps2c), .ps2_rx(scan_out), .ps2_done(scan_done_tick));    // instanti", "label": "        state_next      = state_reg;"}
{"generated": ";             end             else begin              fsm_function = GUESS;             end         end    CHECK: begin              if (solved) begin              fsm_function = FIN;              end              else begin              fsm_function", "label": "              if (solved) begin"}
{"generated": "assign ashi_ridle = (ashi_read == 0) && (ashi_read_state == 0);", "label": "assign ashi_ridle = (ashi_read  == 0) && (ashi_read_state  == 0);"}
{"generated": "", "label": "                .cin(t_cin),\r"}
{"generated": "WIDTH,\r", "label": " *                           Constant Declarations                           *\r"}
{"generated": "was closed during the read cycle).\t      begin\t\t sclk_logic <= 1;\t\t if (dir_write)\t\t   state <= st_ack1;\t\t else\t\t   state <= st_ack", "label": "\t    st_startstop:"}
{"generated": "   .clk_out(clk);\r", "label": "    .clk_out(clk),\r"}
{"generated": "\tassign gpio = mprj_o[0];", "label": "\t\t.FILENAME(\"counter_wb.hex\")"}
{"generated": "bank_read_data;", "label": "\tlocalparam _other_func = 3'b111;\r"}
{"generated": "RST,  input wire [DATA_WIDTH-1:0] DATA_IN,  output wire [DATA_WIDTH-1:0] DATA_OUT,  output wire FULL,  output wire EMPTY);", "label": "          read_pointer <= 0;"}
{"generated": "rcD), .FlagWriteD(FlagWriteD), .ImmSrcD(ImmSrcD), .RegSrcD(RegSrcD)\r", "label": "    wire PredictTaken;\r"}
{"generated": "   output reg [15:0] data_out,", "label": "    output [15:0] data_out"}
{"generated": "16-bit RISC Processor", "label": "  .mem_write(mem_write),"}
{"generated": "input clk,reset,", "label": "input clk,reset,"}
{"generated": ";\r\tendcase\r// Define the sequential block\ralways @(posedge Clock, negedge Resetn)\rbegin\tif (Resetn == 0) y <= initial_node;\r\telse y <= Y;\rend\r", "label": "assign A_Pulse = (y == first_occur);\r"}
{"generated": ", in25,", "label": "always @ (posedge clk) begin"}
{"generated": "\taltpll_component.port_phasecounterselect = \"PORT_UNUSED\",\r\t\taltpll_component.port_phasedone = \"PORT_UNUSED;\r\t\taltpll_component.port_phasestep", "label": "\t\taltpll_component.port_pllena = \"PORT_UNUSED\",\r"}
{"generated": "reg [3:0] ROM_addr;", "label": "reg [2:0] ROM_addr;"}
{"generated": ", 2'b01, 3'b110}: next <= {`MOV_REG_TWO, 4'bxxxx, 3'bxxx, 1'b0, 1'", "label": "            {`LOAD, 2'bxx, 3'bxxx}: next <= {`IF1, 4'b1000, 3'b010, 1'b1, 1'b0, 1'b0, 1'bx, 1'bx, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, `MREAD, 1'b0, 1'b0};"}
{"generated": ";    wire resetForGame;    wire resetForSeg;    wire[2:0] state1ForGame;    wire[2:0] state2ForGame;    wire[2:0] action1ForGame;   ", "label": "    wire[1:0] health1, health2;"}
{"generated": "6000000 = 1.0 ms @ 50 MHz\r\tparameter N_CLK = N*2;\t// 2 clocks per debounce cycle\r\t\r\treg [N-1:", "label": "\talways @ ( posedge clk )\r"}
{"generated": "--------\\n\");", "label": "    output reg [63:0] o_sub_MV,"}
{"generated": ";", "label": "\t\t\t$sdf_annotate(\"../../../caravel/sdf/xres_buf.sdf\", uut.rstb_level) ;"}
{"generated": "   output reg[511:0] fifo_out,    output reg fifo_full,    output reg fifo_empty,    input  [511:0] fifo_in,    input  reg", "label": "    output[511:0] AXIS_FIFO_TDATA,"}
{"generated": "d <= 0;          end        else  if(ivalid_t[1])          begin            data_o <= Q_z[1][q_width:0];            data_r <= {Q_z[1][", "label": "                data_o <= Q_q[1];"}
{"generated": "   @(posedge done);    #(cyc) load; data_in(8'd0, 8'd0);    #(cyc) nop;    @(posedge done);    #(cy", "label": "    @(posedge done);"}
{"generated": "3: CondEx = ~C;        4'd4: CondEx = N;        4'd5: CondEx = ~N;        4'd6: CondEx = V;        4'd7: CondEx", "label": "        4'd10: CondEx = ~(N ^ V);"}
{"generated": "a row", "label": "conv55 #(.BIT_WIDTH(BIT_WIDTH), .OUT_WIDTH(OUT_WIDTH)) CONV2 ("}
{"generated": "else read_empty<=(read_binary=={~sync_write_ptr[address:address-1],sync_write_ptr[address-2:0]});", "label": "else read_empty<=(gray_next==sync_write_ptr);"}
{"generated": "6:0] LED_7SEG, output [7:0] LED_7SEG_B, output LED_B,\r//LCD\rinput [7:0] LCD_DATA, output LCD_EN,", "label": "input UART_RXD,\r"}
{"generated": "                                                      //--------------------\r", "label": "   input [31:0] b, \r"}
{"generated": "psel = 1'b1;        paddr = paddr + (1 << 5); // Target address        pwdata = 32'h0E0D0C0B; // Data to write        @", "label": "        psel = 1'b0;"}
{"generated": "'b1) begin   temp_1 = d1_in;   temp_2 = d2_in;   end else if (done == 1'b1) begin   temp_1 = temp_result;   temp", "label": "   temp_2 = d2_in;"}
{"generated": "\t\\mem[0] ;  reg [DATA_WIDTH-1:0] \t\\mem[1] ;  reg [DATA_WIDTH-1:0] \t\\mem[2] ;  reg [DATA", "label": "  always @ (posedge clk) begin"}
{"generated": "_cnt <= 0;\r", "label": "            state <= init;\r"}
{"generated": "0_000;\r    4'd9 : seg = 7'b0001_000;\r    4'd10 : seg = 7'b0000_100;\r    ", "label": "    4'd9 : seg = 7'b0010_000;\r"}
{"generated": "", "label": "                         state <= stop;"}
{"generated": "b0;\rend\relse if(re==1'b1 && empty==1'b0)\rbegin\rdout<=mem[rd_ptr[3:0]];\rrd_ptr<=rd_ptr+1'b1", "label": "dout<=8'b0; end\r"}
{"generated": "always @(posedge clk or negedge reset) begin", "label": "reg [7:0] counter;"}
{"generated": "XL--                                                                                 ", "label": "-- Date            :   20 September 2000"}
{"generated": "                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               d_ff dff4(    .clk(clk),   ", "label": "    .din(register[2]),"}
{"generated": " found           <= 1;                OldAppleX     <= AppleX;                OldAppleY     <= AppleY;                AppleX        <= MIN_WIDTH  + (SnakeX[0] * OldApp", "label": "                            (X >= SnakeX[901]  && X <= SnakeX[901] - 1 + (WIDTH * 2)) && (Y >= SnakeY[901] && Y <= SnakeY[901] - 1 + (WIDTH *2)) ||"}
{"generated": "   //RW=1;                    type=1;                    nr=2'b10;                    count = 2'b11;                  end              end            //////////////////// count =3            2'b1", "label": "                if(ICW4_exists) count = 2'b11;"}
{"generated": ",", "label": "            if (text_bit_on && (char_addr != 7'h0d))"}
{"generated": "als_AXI4LITE_to_Ctrl_xbar_AXI4LITE_periph_AR_ADDR;    wire [1:0] i_SysCtrl_peripherals_AXI4LITE_", "label": "    assign axi_imem_bridge_r_ready_i = axi_imem_bridge_AXI4LITE_to_Ctrl_xbar_AXI4LITE_IMEM_R_READY;"}
{"generated": "\t\t\tdin_reg <= din;", "label": "\toutput  wire led6, "}
{"generated": ")        );    end endgenerate ", "label": "\t\t\t\t\toperand_C_o <= (control_reg[1] ? sp_op : {BW*Elements_Num{1'b0}}); "}
{"generated": "localparam CMD_READ             = 4'b0001;localparam CMD_WRITE            = 4'b0010;localparam CMD_BURST_READ        = 4'b", "label": "assign sd_cas = sd_cmd[1];"}
{"generated": "               if (cnt == divider) cpol_1 <= 1;", "label": "        if (cnt == divider) cpol_1 <= 1;"}
{"generated": "                                                                                                                                                                                                                                                       carry = 1'b0;                         overflow = 1'b0;                         zero = (r1 ^ r2 == 0)? 1", "label": "                         carry = 1'b0;"}
{"generated": "altpll_component.port_scandata = \"PORT_UNUSED\",", "label": "  output wire SDRAM_nWE,"}
{"generatedx(beta), .y(6'b00), .sel(", "label": "        .sel(1'b0), "}
{"generated": "Cup_rdy=0;\r#200 Cof_rdy=1;\r#200 Cof_rdy=0;\r#200 Coin_5=1;\r#200 Coin_5", "label": "#200 Cof_rdy=1;\r"}
{"generated": "", "label": "             dmpulldown_q != utmi_dmpulldown_i)"}
{"generated": "        output reg [31:0] bus_data_out,", "label": "    always @ (posedge reset, posedge clock) begin"}
{"generated": "               CHECK_BY_PRIORITY:                begin                    for(i = 0; i < NUM_SW_INST; i = i + 1) begin                        if(sw_busy[i]", "label": "            CHECK_BY_PRIORITY:"}
{"generated": "   end    else begin      q1 <= in;      q2 <= q1;      q3 <= q2;    end  end  assign out = q3;  endmodule", "label": "    end else begin"}
{"generated": "SM_Main)  s_IDLE: begin  r_Clock_Count <= 0;  r_Bit_Index   <= 0;  r_Rx_Byte     <= 0;  r_Rx_DV", "label": "                  o_Rx_Active <= 1'b0;"}
{"generated": "\ty <= 3'd2;\t\t\t\tend\t\t\t\telse begin\t\t\t\t\ty <= y + 3'd1;\t\t\t\tend\t\t\tend\t\t\tif(x", "label": "\t\t\t\t8'b00001111: huffman_code[x] <= (huffman_code[x] >> 4);"}
{"generated": "6;\rCSM8_line D_line7(.A({Dout6, A[8]}), .B(B), .Bout(Bout[7]), .D(Dout7);\rCSM8_line", "label": "CSM8_line D_line7(.A({Dout6, A[8]}), .B(B), .Bout(Bout[7]), .D(Dout7));\r"}
{"generated": "   0      ?      1    0   :  ?  :  0    ; // clock data on CP", "label": "    #100 $finish;\r"}
{"generated": "   S2_update_result: begin\r", "label": "module ROM (ROM_data, ROM_addr);\r"}
{"generated": "   ControlUnit CU(Clock,RegDst, Jump, Branch, MemRead, MemWrite, RegWrite, MemToReg, ALUSrc,ALUOp,opcode);", "label": "CU ControlUnit(opcode,"}
{"generated": "RANCH_PREDICTOR_NUM_LINES-1];    reg [`WORD_SIZE-1:0] SavedPCReg;    reg [`WORD_SIZE-1:0] PCPlus4;    reg [`WORD_", "label": "                    Prediction[PC[`BINDEX]] <= (taken) ? 2'b11 : 2'b10;"}
{"generated": "\t\t\t\t\t\t\t\t\t\t\t\tnxt_st=step2;\r", "label": "\t\tnxt_st=step1;\r"}
{"generated": "    initial begin", "label": "And_gate uut(.A(X), .B(Y), .F(Z));"}
{"generated": "(vccd1));", "label": " sky130_fd_sc_hd__tapvpwrvgnd_1 TAP_375 ();"}
{"generated": "reg [WORD_SIZE-1:0] mem_copy[RAM_SIZE-1:0];", "label": "reg [WORD_SIZE-1:0] mem_copy[RAM_SIZE-1:0];"}
{"generated": "\testi_bits = 12'b0000_0001_1101; \r\t#20\r\tinfo_bits = 12'b0110_000", "label": "\testi_bits = 12'b0010_0001_1010; \r"}
{"generated": "data_g;    reg[7:0] data_b;    reg[15:0] height_r;    reg[15:0] width_r;    reg[15:0] height_w", "label": "    always@(posedge clk) begin"}
{"generated": "               if (TestVectors[VectorNum][42:41] == 2'b00) // Test", "label": "            $display(\"Output Values:\");"}
{"generated": "GND),    .VPB(VPWR),    .VPWR(VPWR)); sky130_ef_sc_hd__decap_12 FILLER_0_3_57 (.VGND", "label": "    .VPWR(VPWR));"}
{"generated": "ision: // Revision 0.01 - File Created // Additional Comments: /////////////////////////////////////////////////////////", "label": "\t\t\t\t2'b10 : SEG_DATA = 8'b01011011;"}
{"generated": "", "label": "            Tff_B <= 0;"}
{"generated": "   input clk,", "label": "    input wire                   clk,"}
{"generated": "Copyright 2020 The SkyWater PDK Authors", "label": "reg [12:0] baud_count;\r"}
{"generated": "2'b11: immext = {{20{instr[31]}}, instr[7],instr[30:25], instr[11:8], instr[10:0]}; endcase", "label": " 2'b11: immext = {{12{instr[31]}}, instr[19:12],"}
{"generated": "(cnt_K3 == 2'd2 && cnt_K3_on ==1)", "label": "\t\t\t\t\t\t(bin_data==2)?8'b00100101:"}
{"generated": "den;\ttri1\t  wren;\ttri1\t  address;\t", "label": "\t\t\t\t.eccstatus (),"}
{"generated": "TL //////", "label": "\toutput\t\t          \t\tDRAM_RAS_N,"}
{"generated": "alessb lth3(.i0(a0[2]),.i1(b0[2]),.a_lth_b(out[2]);\r\r", "label": "alessb lth3(.i0(a0[2]),.i1(b0[2]),.a_lth_b(out[2]));\r"}
{"generated": ";\r\t//output register\r\twire o1, o2, o3, o4, o5;\r\t//state register\r\twire [2:0] s1, s2, s3, s4, s5;\r", "label": "\t\t\t\t\t\t.b3(b3[1:0]), \r"}
{"generated": "if(lamp[15:0] == 16'b0000000000111111) next = 3'd6;                   else next = 3'd", "label": "                  if(lamp[15:0] == 16'b0000000000111111|| lamp[15:0]== 16'b0000011111111111) next = 3'd4;"}
{"generated": "        #50 $finish;", "label": "  #300 $finish;"}
{"generated": "12'b0;\r", "label": "\t\t\tcase(AluController)"}
{"generated": "               if (i == 32) begin\r                    Hi = quo;\r                    Lo = resto[31:0]; \r                end\r                    \r            end\r                     \r            end\r        end", "label": "                if (i == 33) begin\r"}
{"generated": "n146;  wire n147;  wire n148;  wire n149;  wire n15;  wire n150;  wire n151;  wire n1", "label": "    .RESET_B(n117)"}
{"generated": "tx_mask_valid <= next_tx_mask_valid;   tx_en <= next_tx_en;  end  assign next_tx_state = tx_state;  assign next_tx_wcnt = tx_", "label": "   next_tx_wcnt = 8'h00;"}
{"generated": "//the sole purpose of programming logic devices manufactured by\r//Intel and sold by Intel or its authorized distributors. Please\r//refer to the applicable agreement for further details, at\r//https://fpgasoftware.intel.com", "label": "\tinput\t[3:0]  data0x;\r"}
{"generated": ";wire encoding_pure_6\t\t= SPLIT_wire & pure_symbol == 3'd6 & ~encoding_idle;wire [7:0] encoding_temp_reg;wire [7:0]", "label": "always@(posedge clk or posedge reset) begin"}
{"generated": "\talways @(posedge clk) begin", "label": "\treg [1:0] state;"}
{"generated": ".clk_50m(clk), .tx(loopback), .tx_busy(tx_busy), .rx(rxdata), .rdy(rdy), .rdy_clr(rdy_cl", "label": "\t       .clk_50m(clk),"}
{"generated": "       .data_out(glb_data_out),", "label": "    .write_enable(glb_write_enable),"}
{"generated": "/00led_flip_module/led_drive.v", "label": "assign w_c = p_b;"}
{"generated": "assign net_so = ~out_buf_status;//output buffer status = 0 -> output buffer is empty -> NIC output channel is ready    assign net_do = out_buf_d_out;//output buffer data   ", "label": "                default: d_out = 'b0;"}
{"generated": "                                                                                                                                                                                                 output wire [`SCRATCHPAD_SRAM_ADDRESS_UPPER_BOUND-1:0]     scratchpad_sram_read_address       ,  ", "label": "  output wire [`SCRATCHPAD_SRAM_ADDRESS_UPPER_BOUND-1:0]     scratchpad_sram_read_address        , "}
{"generated": "   output reg [15:0] Dfifo,", "label": "output reg [15:0] Dfifo,"}
{"generated": "\t\t\t\t\t\t\t\t\t\t\t\t\tcounter_reg <= counter_next;\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "label": "\t\t\t\tcounter_reg <= counter_next;\r"}
{"generated": " );", "label": "  initial clk_out = 0;"}
{"generated": "AM;reg [31:0] data_number; // because of \"[31:0] data_length\" in fir_tb.vreg [31:0] next_data_number;reg [31:", "label": "                    rvalid_reg=last_rvalid;"}
{"generatedelse y_next = y;   ", "label": "      default: y_next = 1'sbx;"}
{"generated": "0;\r\t       jump <= 1'b0;\r\t       enWriteMemory <= 1'b0;\r\t       MemaReg <= 1'b0;\r\t       enWrSram <= 1'b0;\r\t", "label": "\t\t\t\t\tMemaReg_src = 1'bx;\r"}
{"generated": "7:0]\t\t\t write_data_internal;   //internal registers   reg [7:0]\t\t\t fifo_data_current[0:7];   reg [7:0]\t\t\t fifo", "label": "\t\t\t      .full(full_external_next),"}
{"generated": "                                                                                                                                                                                                                                                                                                                                       .debug_reg(debug_reg));    assign inst = cpu.inst;    assign core_data_in = cpu.data_", "label": "        .debug_reg(debug_reg)"}
{"generated": ";  if(branchstall)beginStallF=1;StallD=1;FlushE=1;end  else beginStallF=0;StallD=0;FlushE=0;end", "label": "lwstall = ((rsD == rtE) | (rtD == rtE)) & MemtoRegE;"}
{"generated": "     shamt = 5'd2;", "label": "    shamt = 5'd0;"}
{"generated": "\t\t\tout_snd_din     \t\t<= #TCQ In_rcv_dout;\r", "label": "input   wire\t\t\t\t\t\t\t\t\tIn_snd_empty\t\t\t;\r"}
{"generated": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Draw the H-Syncwire [", "label": "\t.box_height(line16_height),"}
{"generated": "                 .address_in(address_in),             .data_in(data_in),             .hit_out(hit_out),             .data_out(data_out),             .valids(valids),            ", "label": "             .set_in(set_idx),"}
{"generated": ";                eof_find = 1;            end            DMEM_golden[i] = mem_inst[i];        end        $readmemh (`MEM_DATA, mem_data);        $readmem", "label": "        $display(\"                            ,dxxxxkOOOOkkkxdooddooolllok0000Okdollllcokk,                                                                                       \");"}
{"generated": "   always @ (a or b or c or d or sel) begin", "label": "    always @ (a or b or c or d or sel)"}
{"generated": "put your design here", "label": "wire [4:0] carry_wire;"}
{"generated": " wire                 o_tvalid;  wire                 o_tlast;  wire                  o_tredady;", "label": "  wire               o_tvalid;"}
{"generated": "\t\t6'b100010: begin ALUcontrol=3'b001; ALUsrc=1'b0; end  //sub || ALUsrc for rd2\t\t\t\t6", "label": "\t\t\t\tdefault ALUcontrol = 0;"}
{"generated": "       .we0(shift_reg_we0),    .address1(shift_reg_address1),    .ce1(shift_reg_ce1),    .we1(shift_reg_we1),    .", "label": "    .we0(shift_reg_we0),"}
{"generated": "} + m_ow2;  y_w = {y_out1,1'b0} + y_out2;  x_out = {x_out_inc,1'b0} + x_out", "label": "  x_w_inc = (x_w=='d2)? 'd0 : x_w + 1'd1;"}
{"generated": "   if (btnu) begin", "label": "    if (btnu) begin"}
{"generated": "   if (!Rst_n)", "label": "    if (!Rst_n)                 Out <= 1'b0;"}
{"generated": "= 0;\t\t\t\t#10\t\ta = 1;\t\tb = 1;\t\tcin = 1;\t\t\t\t#10\t$stop;\tend\tendmodule", "label": "endmodule"}
{"generated": "                           reset = 1;", "label": "                #200; reset = 1; #10 reset = 0;"}
{"generated": ".S_AXI_WDATA(s00_axi_wdata),", "label": "\t\tinput wire  S_AXI_AWVALID,"}
{"generated": "% duty cycle    PWM_Generator pwm (        .clk(clk),        .rst(~en),        .duty_cycle(duty_cycle),        .pwm(pwm_out)    );   ", "label": "    PWM_Generator pwm_gen ("}
{"generated": "i_arready;\treg  \taxi_rready;\treg [C_S_AXI_DATA_WIDTH-1 : 0] \taxi_rdata;\treg [1 : 0]", "label": "\treg [C_S_AXI_DATA_WIDTH-1:0]\tslv_reg13;"}
{"generated": "==1)?A1<<(2*3):(E[3]==2)?16'b0:(E[3]==3)?A0<<(2*3):A2<<(2*3);\r", "label": "wire [15:0] P_sum;\r"}
{"generated": "endmodule", "label": "  assign is0 = (result == 32'b0) ? 1 : 0;"}
{"generated": "begin", "label": "module AddSub(raout, buswires, sub, result);"}
{"generated": "                            *\r", "label": "\telse if (read_left_channel)\r"}
{"generated": "   #50 data_in_tb=2;", "label": "    #50 data_in_tb=2;"}
{"generated": "2 <= rx_byte_done_r_1;    rx_byte_done_r_1 <= rx_byte_done_s;    if (reset_n_s) begin        state <= ST_RESET;        addr", "label": "            rx_byte_done <= 1;"}
{"generated": "module control_unit(reset,opCode,rs,rt,rd,RegWriteD,MemtoRegD,MemWriteD,Branch", "label": "data_memory block_2(ALUOutM,WriteDataM,MemwriteM,RD,clk);\r"}
{"generated": "   input [3:0] a,    //input a    ,    input [3:0] b,    output [3:0] result);", "label": "    and_gate and0 (.a(a[0]), .b(b[0]), .x(results[0]));"}
{"generated": ":0] regDst,\t// RegDst control signal (0,1,2,3) \r   input [31:0] rs1,\t// rs1 input\r   input [31:0] rs", "label": "\toutput reg [31:0] result,\r"}
{"generated": "7'b0100100;parameter x2=7'b0110001;parameter x3=7'b0011011;parameter x4=7'b00", "label": "else if(count0==4'b0011)"}
{"generated": "//         2'b01: Tmp = Din1 -", "label": "/*Write your design here*/"}
{"generated": "f, reset_n_s);    wire        cont1_key_s, cont2_key_s, cont3_key_s, cont4_key_s, cont1_joy_s, cont2_joy", "label": "    localparam  ST_RESET        = 'd0;"}
{"generated": "011_q_0 = (b_1011 & p_ge_neg3 & ~p_ge_3);    wire p_1011_q_1 = (b_1011", "label": "    wire p_1101_q_1 = (b_1101 & p_ge_3 & ~p_ge_10);"}
{"generated": "assign inst23_0 = instruc[23:0);\r\r", "label": "assign inst23_0 = instruc[23:0];\r"}
{"generated": "   $dumpfile(\"mod_counter_tb.vcd\");", "label": "    $dumpfile(\"mod_counter_tb.vcd\");"}
{"generated": "modulemodule FA (NUM1,NUM2,CIN,SUM,COUT);  input NUM1,NUM2,CIN;  output reg SUM,COUT;    always @(*)    begin      #3", "label": "module FA(NUM1,NUM2,CIN,SUM,COUT);"}
{"generated": "data)    );        MUX2 MUX2_MemWrite(         .i_ctrl       \t(MemWrite),        .i_0    \t(1'b0),        .i_1    \t(1'b", "label": "        end else begin"}
{"generated": "_r = {alu_a_i[31:1],1'b0};\t\t\t//*** shift right 1, x2\r            else\r                shift_right_1_r = alu_a", "label": "            if (alu_b_i[4] == 1'b1)\r"}
{"generated": "reset_n      (reset_sink_reset_n),                        // reset_sink.reset_n\t\t.rst_n             (reset_sink_reset_n)\t);\taltera_mod", "label": "\t\t.CSD_SLOT_63      (5'b00000),"}
{"generated": "//", "label": "    reg [1:0] FunSel;"}
{"generated": "module main(x, on, start, y, s, b, regime, active, clk, rst);  input [7:0] x;  input [1:0", "label": "        end else begin"}
{"generated": "(", "label": "    input clk1,"}
{"generated": ";\r\treg [15:0] rsval, rtval;\r\treg [2:0] shamt;\r\treg [3:0] opcode;\r\treg [15:0] rdval;\r\t\r\t", "label": "\twire [3:0] opcode;\r"}
{"generated": "ct=currentIns[5:0];assign Rs=currentIns[25:21];assign Rt=currentIns[20:16];assign Rd=currentIns[15:11];assign Imm=", "label": "assign Imm = currentIns[15:0];"}
{"generated": "endmodule", "label": "    always #20 clk=~clk;"}
{"generated": "begin        product <= 0;        counter <= 4'b0000;        state <= 2'b00;        mcand <= 0;        k <= 0;        done <= 0;   ", "label": "                state <= 2'b01;"}
{"generated": "\")begin  encoder_1280_1024 #(.width(width)                     ) U1 (.clk(clk),                           .rst_n(rst_n),                           .s", "label": "                           .s_axis_tdata(s_axis_tdata),"}
{"generated": "    case(state)", "label": "        last_data_A <= 0;"}
{"generated": "MemWriteD=0;\rBranchD=1;\rALUSrcD=0;\rRegDstD=0;\rRegWriteD=0;\rALUOp=0;\rjump = 0;\rend \r'b110", "label": "MemWriteD=0;\r"}
{"generated": "ION STAGEreg[31:0] EX_MEM_A,EX_MEM_B,EX_MEM_RD,EX_MEM_IMMEDIATE,EX_MEM_IR,EX_MEM_NPC;     ", "label": "    REG[0] <= 32'h00000000;"}
{"generated": "(Inp[0],Inp[15],Shift_Mag[0],S1[0]);    Mux2_1 Stage1_2 (Inp[1],Inp[14],Shift_Mag[1", "label": "module Compare_Found_Result(input Compare_Found, output Compare_Found_Out);"}
{"generated": "74138 (", "label": "    $monitor($time,\":\\t En=%b, I=%b, O=%b\\n\", En, I, O);"}
{"generated": "ALU_FUN_tb = 4'b0010;", "label": "    A_tb = 'd4;"}
{"generated": "clk), .rst(rst))\r    .in(in_3), .out(out_3)\r);Gw_G_single row4 (\r    .clk(clk), .rst(rst))\r    .", "label": "    .clk(clk), .rst(rst),\r"}
{"generated": ": // Revision: // Additional Comments: ////////////////////////////////////////////////////////////////////////////// ", "label": "assign OUT = IN_1 + IN_2 ;"}
{"generated": "parameter [7:0] n2_w4 = -8'd10;\r\tparameter [15:0] n2_bias = 16'd12571;\r\tparameter [11:0", "label": "\tparameter [11:0] n2_xmin = -12'd127;\r"}
{"generated": "SYMBOLS_PER_BEAT * BITS_PER_SYMBOL;", "label": "\toutput\t[16:0]\tred_leds_external_connection_export;"}
{"generated": ":  1    ; // reduce pessimism        endtableendprimitive`endif // NO_PRIMITIVES`default_nettype wire`endif  // SKY130_FD_SC_HD__UDP", "label": "         0   0   ?   ?   ?   0  :  0   ;"}
{"generated": "rx_bit(8'd6);\r    rx_bit(8'd7);\r    rx_bit(8'd8);\r    rx_bit(8'd9);\r    rx_bit(8'd10);\r", "label": "    rx_bit(8'd6);\r"}
{"generated": "               $finish;         ", "label": "        i_tsel = 1;"}
{"generated": "   wire CCLKO_GLBL_BUF;", "label": "    wire FCSBO_GLBL;"}
{"generated": "reg signed [31:0] mem [255:0]\r", "label": "reg [31:0] mem [255:0];\r"}
{"generated": "0 of inputSw and clockCount to avoid race condition                    state <= DATA_BITS;                    pwm_out <= receivedData[7]; // Convert MSB of received data to PWM                    bitIdx <= 3'", "label": "                    if (&inputSw) begin"}
{"generated": "b1;        end else begin            equal_r = 1'b0;        end         if($unsigned(in1_i) < $unsigned(in2_i)) begin             less_t_r = 1'", "label": "        end else begin"}
{"generated": ";", "label": "reg t_vote_over;"}
{"generated": "                                                                                                                                                                                                                                       .RegWrite(regwrite), \r", "label": "        .RegWrite(regwrite), \r"}
{"generated": "       .fifo_wr_en(wr_en_bus2fifo_w),", "label": "        .fifo_wr_en(wr_en_bus2fifo_w)"}
{"generated": "_en_nic, node2_en_nic, node3_en_nic;\rwire node0_wr_en_nic, node1_wr_en_nic, node2_wr_en_nic, node3_", "label": "    .dump_packet_node2(dump_packet_node2),\r"}
{"generated": "\r/*--- ID ---*;\r", "label": "/*--- ID ---*/\r"}
{"generated": "           BrLT = (A < B);", "label": "            BrLT = (A[31] < B[31]) ? 1'b1 : (A[31] == B[31]) ? (A < B) : 1'b0;"}
{"generated": "00E;\r\tLCD_INTIAL+4:\tLUT_DATA\t<=\t9'h001;\r\tLCD_INTIAL+5:\tLUT_DATA\t<=\t9'h00", "label": "\tLCD_INTIAL+4:\tLUT_DATA\t<=\t9'h080;\r"}
{"generated": "= 32'h0000_1111;\r\t\t\t   alu_op_i = `ALU_SLLV;\t\r\t\t#(p)   $display(\"T=%0", "label": "\t\t#(2*p) alu_op_i = `ALU_SRA;\t\r"}
{"generated": "   parameter IDLE = 2'b00;", "label": "    parameter s0 = 0, s1 = 1, s2 = 2, s3 = 3;"}
{"generated": " assign we_array[i] = reset? 1 : write_en & (addr_in == i);", "label": "          assign we_array[i] = reset? 1 : write_en & (addr_in == i);"}
{"generated": "       state <= IDLE;", "label": "        d_write <= 0;"}
{"generated": "\t\r\talways@(posedge CLK or negedge CLR_n)\r\tbegin\r\t\tif(!CLR_n)\r\t\t\tbegin\r\t\t\t\tPC_Counter <= 4'b00", "label": "\t\t\t else if(Cp)\r"}
{"generated": "\t\tRegWrite\t= 1'b0;", "label": "     input  [31:0] I0,I1,I2,I3;"}
{"generated": "= or1 | or2 | or3 | or4;\r", "label": "\twire and2, and3, and4, or1;\r"}
{"generated": "12module elevator ( requested_floor, destination_floor_elevator1,         destination_floor_elevator2, current_floor_elevator1,         current_floor_elevator2, clk, reset", "label": "        \\ne_42/GTV2 [7]) );"}
{"generated": "                    cmd_oe <= 0;", "label": "                cmd_oe <= 0;"}
{"generated": " wire [7:0]int_request;", "label": "  reg [2:0] SLAVE_ADRESS;"}
{"generated": "\t\t\trptr_gray <= {(AddWidth+1){1'b0}};\t\t\t\t\t//clean all rptr_gray", "label": "assign    newcrc[4] = d[31] ^ d[30] ^ d[29] ^ d[25] ^ d[24] ^ d[20] ^ d[19] ^ d[18] ^ d[15] ^ d[12] ^ d[11] ^ d[8] ^ d[6] ^ d[4] ^ d[3] ^ d[2] ^ d[0] ^ c[0] ^ c[2] ^ c[3] ^ c[4] ^ c[6] ^ c[8] ^ c[11] ^ c[12] ^ c[15] ^ c[18] ^ c[19] ^ c[20] ^ c[24] ^ c[25] ^ c[29] ^ c[30] ^ c[31];"}
{"generated": "`define DTAG_SIZE (`WORD_SIZE - `DOFFSET_SIZE - `INDEX_SIZE) // bits needed to represent the tag.", "label": "\t\t(ALUControlE == `SGT_FUNCT3) ? a > b :"}
